import{_ as n,o as s,c as a,b as t}from"./app-3bb1037e.js";const p="/assets/1698761465447-607d1bbe.png",e="/assets/1698761483204-13d86378.png",o="/assets/1698761628621-032ae0fa.png",c="/assets/1698762783877-cef305f8.png",l="/assets/1698763064706-1127979a.png",i={},u=t('<h2 id="第-7-节-springcloud-stream-消息驱动组件" tabindex="-1"><a class="header-anchor" href="#第-7-节-springcloud-stream-消息驱动组件" aria-hidden="true">#</a> <strong>第 7 节 SpringCloud Stream 消息驱动组件</strong></h2><p>Spring Cloud Stream 消息驱动组件帮助我们更快速，更方便，更友好的去构建<strong>消息驱动</strong>微服务的。</p><p>当时定时任务和消息驱动的⼀个对比。（消息驱动：基于消息机制做⼀些事情）MQ：消息队列/消息中间件/消息代理，产品有很多，ActiveMQ RabbitMQ RocketMQ Kafka</p><h3 id="_7-1-stream-解决的痛点问题" tabindex="-1"><a class="header-anchor" href="#_7-1-stream-解决的痛点问题" aria-hidden="true">#</a> <strong>7.1 Stream 解决的痛点问题</strong></h3><p>MQ消息中间件⼴泛应用在应用解耦合、异步消息处理、流量削峰等场景中。</p><p>不同的MQ消息中间件内部机制包括使⽤⽅式都会有所不同，⽐如RabbitMQ中有 Exchange（交换机/交换器）这⼀概念，kafka有Topic、Partition分区这些概念，MQ消息中间件的差异性不利于我们上层的开发应用，当我们的系统希望从原有的 RabbitMQ切换到Kafka时，我们会发现比较困难，很多要操作可能重来（<strong>因为应用程序和具体的某⼀款 MQ 消息中间件耦合在⼀起了</strong>）。</p><p>Spring Cloud Stream进⾏了很好的<strong>上层抽象</strong>，可以让我们与具体消息中间件解耦合，屏蔽掉了底层具体MQ消息中间件的细节差异，就像Hibernate屏蔽掉了具体数据库（Mysql/Oracle⼀样）。如此⼀来，我们学习、开发、维护MQ都会变得轻松。</p><p>⽬前Spring Cloud Stream⽀持RabbitMQ和Kafka。</p><p><strong>本质：屏蔽掉了底层不同MQ消息中间件之间的差异，统⼀了MQ的编程模型，降低了学习、开发、维护MQ的成本。</strong></p><hr><h3 id="_7-2-stream-重要概念" tabindex="-1"><a class="header-anchor" href="#_7-2-stream-重要概念" aria-hidden="true">#</a> <strong>7.2 Stream 重要概念</strong></h3><p>Spring Cloud Stream 是⼀个构建消息驱动微服务的框架。应⽤程序通过inputs（相当于消息消费者consumer）或者outputs（相当于消息⽣产者producer）来与 Spring Cloud Stream中的binder对象交互，⽽Binder对象是⽤来屏蔽底层MQ细节的，它负责与具体的消息中间件交互。</p><p><strong>说白了：对于我们来说，只需要知道如何使⽤Spring Cloud Stream与Binder对象交互即可</strong></p><p><img src="'+p+'" alt="1698761465447"></p><p><img src="'+e+'" alt="1698761483204"></p><p><strong>Binder绑定器</strong></p><p>Binder绑定器是Spring Cloud Stream 中⾮常核⼼的概念，就是通过它来屏蔽底层不同MQ消息中间件的细节差异，当需要更换为其他消息中间件时，我们需要做的就是更换对应的<strong>Binder绑定器</strong>而不需要修改任何应⽤逻辑（Binder绑定器的实现是框架内置的，Spring Cloud Stream目前⽀持Rabbit、Kafka两种消息队列）</p><hr><h3 id="_7-3-传统-mq-模型与-stream-消息驱动模型" tabindex="-1"><a class="header-anchor" href="#_7-3-传统-mq-模型与-stream-消息驱动模型" aria-hidden="true">#</a> <strong>7.3</strong> <strong>传统 MQ 模型与 Stream 消息驱动模型</strong></h3><p><img src="'+o+`" alt="1698761628621"></p><h3 id="_7-4-stream-消息通信方式及编程模型" tabindex="-1"><a class="header-anchor" href="#_7-4-stream-消息通信方式及编程模型" aria-hidden="true">#</a> <strong>7.4 Stream 消息通信方式及编程模型</strong></h3><h4 id="_7-4-1-stream-消息通信方式" tabindex="-1"><a class="header-anchor" href="#_7-4-1-stream-消息通信方式" aria-hidden="true">#</a> <strong>7.4.1 Stream 消息通信方式</strong></h4><p>Stream中的消息通信方式遵循了发布—订阅模式。</p><p>在Spring Cloud Stream中的消息通信⽅式遵循了发布-订阅模式，当⼀条消息被投递到消息中间件之 后，它会通过共享的 Topic 主题进⾏⼴播，消息消费者在订阅的主题中收到它并触发⾃身的业务逻辑处理。这里所提到的 Topic 主题是Spring Cloud Stream中的⼀个抽象概念，用来代表发布共享消息给消 费者的地⽅。在不同的消息中间件中， Topic 可能对应着不同的概念，⽐如：在RabbitMQ中的它对应了Exchange、在Kakfa中则对应了Kafka中的Topic。</p><h4 id="_7-4-2-stream-编程注解" tabindex="-1"><a class="header-anchor" href="#_7-4-2-stream-编程注解" aria-hidden="true">#</a> <strong>7.4.2 Stream 编程注解</strong></h4><p><strong>如下的注解无非在做⼀件事，把我们结构图中那些组成部分上下关联起来，打通通道（这样的话生产者的 message 数据才能进入 mq ， mq 中数据才能进⼊消费者工程）</strong>。</p><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Input（在消费者⼯程中使用）</td><td>注解标识输⼊通道，通过该输⼊通道接收到的消息进⼊应用程序</td></tr><tr><td>@Output（在⽣产者⼯程中使用）</td><td>注解标识输出通道，发布的消息将通过该通道离开应⽤程序</td></tr><tr><td>@StreamListener（在消费者⼯程中使用，监听message的到来）</td><td>监听队列，用于消费者的队列的消息的接收（有消息监听.....）</td></tr><tr><td>@EnableBinding</td><td>把Channel和Exchange（对于RabbitMQ）绑定在⼀起</td></tr></tbody></table><p>接下来，我们创建三个⼯程（我们基于RabbitMQ，RabbitMQ的安装和使用这里不再说明）</p><ul><li>lagou-cloud-stream-producer-9090， 作为⽣产者端发消息</li><li>lagou-cloud-stream-consumer-9091，作为消费者端接收消息</li><li>lagou-cloud-stream-consumer-9092，作为消费者端接收消息</li></ul><hr><h4 id="_7-4-3-stream-消息驱动之开发生产者端" tabindex="-1"><a class="header-anchor" href="#_7-4-3-stream-消息驱动之开发生产者端" aria-hidden="true">#</a> <strong>7.4.3 Stream 消息驱动之开发⽣产者端</strong></h4><p>1）在lagou_parent下新建⼦module：lagou-cloud-stream-producer-9090</p><p>2）pom.xml中添加依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--eureka client 客户端依赖引⼊--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eurekaclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--spring cloud stream 依赖（rabbit）--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）application.yml添加配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
 <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">application</span><span class="token punctuation">:</span>
 <span class="token key atrule">name</span><span class="token punctuation">:</span> lagou<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>stream<span class="token punctuation">-</span>producer
 <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
 <span class="token key atrule">stream</span><span class="token punctuation">:</span>
 <span class="token key atrule">binders</span><span class="token punctuation">:</span> <span class="token comment"># 绑定MQ服务信息（此处我们是RabbitMQ）</span>
 <span class="token key atrule">lagouRabbitBinder</span><span class="token punctuation">:</span> <span class="token comment"># 给Binder定义的名称，⽤于后⾯的关联</span>
 <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit <span class="token comment"># MQ类型，如果是Kafka的话，此处配置kafka</span>
 <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># MQ环境配置（⽤户名、密码等）</span>
 <span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
 <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
 <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
 <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
 <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
 <span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment"># 关联整合通道和binder对象</span>
 <span class="token key atrule">output</span><span class="token punctuation">:</span> <span class="token comment"># output是我们定义的通道名称，此处不能乱改</span>
 <span class="token key atrule">destination</span><span class="token punctuation">:</span> lagouExchange <span class="token comment"># 要使⽤的Exchange名称（消息队列主题名称）</span>
 <span class="token key atrule">content-type</span><span class="token punctuation">:</span> text/plain <span class="token comment"># application/json # 消息类型设置，⽐如json</span>
 <span class="token key atrule">binder</span><span class="token punctuation">:</span> lagouRabbitBinder <span class="token comment"># 关联MQ服务</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">client</span><span class="token punctuation">:</span>
 <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span> <span class="token comment"># eureka server的路径</span>
 <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span>
http<span class="token punctuation">:</span>//lagoucloudeurekaservera<span class="token punctuation">:</span>8761/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//lagoucloudeurekaserverb<span class="token punctuation">:</span>8762/eureka/ <span class="token comment">#把 eureka 集群中的所有 url 都填写了进来，也可以只写⼀台，因为各个 eureka server 可以同步注册表</span>
 <span class="token key atrule">instance</span><span class="token punctuation">:</span>
 <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#使⽤ip注册</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>启动类</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamProducerApplication9090</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">StreamProducerApplication9090</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5）业务类开发（发送消息接口、接口实现类、Controller）接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMessageProducer</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IMessageProducer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableBinding</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">Source</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">MessageBuilder</span></span><span class="token punctuation">;</span>

<span class="token comment">// Source.class⾥⾯就是对输出通道的定义（这是Spring Cloud Stream内置的通道封装）</span>
<span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span><span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageProducerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IMessageProducer</span> <span class="token punctuation">{</span>
    
<span class="token comment">// 将MessageChannel的封装对象Source注⼊到这⾥使⽤</span>
 <span class="token annotation punctuation">@Autowired</span>
 <span class="token keyword">private</span> <span class="token class-name">Source</span> source<span class="token punctuation">;</span>
    
 <span class="token annotation punctuation">@Override</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 向mq中发送消息（并不是直接操作mq，应该操作的是spring cloudstream）</span>
 <span class="token comment">// 使⽤通道向外发出消息(指的是Source⾥⾯的output通道)</span>
	source<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span></span><span class="token class-name">StreamProducerApplication9090</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IMessageProducer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringJUnit4ClassRunner</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">StreamProducerApplication9090</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageProducerTest</span> <span class="token punctuation">{</span>
 <span class="token annotation punctuation">@Autowired</span>
 <span class="token keyword">private</span> <span class="token class-name">IMessageProducer</span> iMessageProducer<span class="token punctuation">;</span>
    
 <span class="token annotation punctuation">@Test</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	iMessageProducer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;hello world-lagou101&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_7-4-4-stream消息驱动之开发消费者端" tabindex="-1"><a class="header-anchor" href="#_7-4-4-stream消息驱动之开发消费者端" aria-hidden="true">#</a> <strong>7.4.4 Stream消息驱动之开发消费者端</strong></h4><p>此处我们记录lagou-cloud-stream-consumer-9091编写过程，9092⼯程类似</p><p>1）application.yml</p><p><img src="`+c+`" alt="1698762783877"></p><p>2）消息消费者监听</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableBinding</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">StreamListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">Sink</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">Message</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageConsumerService</span> <span class="token punctuation">{</span>
 <span class="token annotation punctuation">@StreamListener</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token punctuation">.</span><span class="token constant">INPUT</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recevieMessages</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=========接收到的消息：&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7-5-stream-高级之自定义消息通道" tabindex="-1"><a class="header-anchor" href="#_7-5-stream-高级之自定义消息通道" aria-hidden="true">#</a> <strong>7.5 Stream 高级之自定义消息通道</strong></h3><p>Stream 内置了两种接⼝Source和Sink分别定义了 binding 为 “input” 的输⼊流和 “output” 的输出流，我们也可以⾃定义各种输⼊输出流（通道），但实际我们可以在我们的服务中使⽤多个binder、多个输⼊通道和输出通道，然⽽默认就带了⼀个 input的输⼊通道和⼀个output的输出通道，怎么办？</p><p>我们是可以⾃定义消息通道的，学着Source和Sink的样⼦，给你的通道定义个自己的名字，多个输⼊通道和输出通道是可以写在⼀个类中的。</p><p>定义接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">CustomChannel</span> <span class="token punctuation">{</span>
 <span class="token class-name">String</span> <span class="token constant">INPUT_LOG</span> <span class="token operator">=</span> <span class="token string">&quot;inputLog&quot;</span><span class="token punctuation">;</span>
 <span class="token class-name">String</span> <span class="token constant">OUTPUT_LOG</span> <span class="token operator">=</span> <span class="token string">&quot;outputLog&quot;</span><span class="token punctuation">;</span>
    
 <span class="token annotation punctuation">@Input</span><span class="token punctuation">(</span><span class="token constant">INPUT_LOG</span><span class="token punctuation">)</span>
 <span class="token class-name">SubscribableChannel</span> <span class="token function">inputLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
 <span class="token annotation punctuation">@Output</span><span class="token punctuation">(</span><span class="token constant">OUTPUT_LOG</span><span class="token punctuation">)</span>
 <span class="token class-name">MessageChannel</span> <span class="token function">outputLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如何使用？</strong></p><p>1）在 @EnableBinding 注解中，绑定⾃定义的接口</p><p>2）使用 @StreamListener 做监听的时候，需要指定 CustomChannel.INPUT_LOG</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">bindings</span><span class="token punctuation">:</span>
 <span class="token key atrule">inputLog</span><span class="token punctuation">:</span>
 <span class="token key atrule">destination</span><span class="token punctuation">:</span> lagouExchange
 <span class="token key atrule">outputLog</span><span class="token punctuation">:</span>
 <span class="token key atrule">destination</span><span class="token punctuation">:</span> eduExchange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-6-stream-高级之消息分组" tabindex="-1"><a class="header-anchor" href="#_7-6-stream-高级之消息分组" aria-hidden="true">#</a> <strong>7.6 Stream 高级之消息分组</strong></h3><p>如上我们的情况，消费者端有两个（消费同⼀个MQ的同⼀个主题），但是呢我们的业务场景中希望这个主题的⼀个Message只能被⼀个消费者端消费处理，此时我们就可以使用消息分组。</p><p><strong>解决的问题：能解决消息重复消费问题</strong></p><p>我们仅仅需要在服务消费者端设置 spring.cloud.stream.bindings.input.group 属性，多个消费者实例配置为同⼀个group名称（在同⼀个group中的多个消费者只有⼀个可以获取到消息并消费）。</p><p><img src="`+l+'" alt="1698763064706"></p>',66),r=[u];function k(d,m){return s(),a("div",null,r)}const g=n(i,[["render",k],["__file","47.html.vue"]]);export{g as default};
