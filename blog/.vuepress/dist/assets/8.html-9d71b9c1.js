import{_ as e,r as p,o,c,a,d as n,e as l,b as s}from"./app-3bb1037e.js";const i="/assets/1701498290620-b4b3fdfb.png",u="/assets/1701498429521-19172a15.png",r="/assets/1701498461003-f2319985.png",d="/assets/1701521228532-00fe4b97.png",k={},v=s('<h2 id="_1、spi" tabindex="-1"><a class="header-anchor" href="#_1、spi" aria-hidden="true">#</a> 1、SPI</h2><h3 id="_1-1-spi简介" tabindex="-1"><a class="header-anchor" href="#_1-1-spi简介" aria-hidden="true">#</a> 1.1 SPI简介</h3><p>​ SPI 全称为 (Service Provider Interface) ，是JDK内置的一种服务提供发现机制。 目前有不少框架用它来做服务的扩展发现，简单来说，它就是一种动态替换发现的机制。使用SPI机制的优势是实现解耦，使得第三方服务模块的装配控制逻辑与调用者的业务代码分离。</p><h3 id="_1-2-jdk中的spi" tabindex="-1"><a class="header-anchor" href="#_1-2-jdk中的spi" aria-hidden="true">#</a> 1.2 JDK中的SPI</h3><p><img src="'+i+'" alt="1701498290620"></p><p>​ Java中如果想要使用SPI功能，先提供标准服务接口，然后再提供相关接口实现和调用者。这样就可以通过SPI机制中约定好的信息进行查询相应的接口实现。</p><p>SPI遵循如下约定：</p><ol><li>当服务提供者提供了接口的一种具体实现后，在META-INF/services目录下创建一个以“接口全限定名”为命名的文件，内容为实现类的全限定名；</li><li>接口实现类所在的jar包放在主程序的classpath中；</li><li>主程序通过java.util.ServiceLoader动态装载实现模块，它通过扫描META-INF/services目录下的配置文件找到实现类的全限定名，把类加载到JVM；</li><li>SPI的实现类必须携带一个无参构造方法；</li></ol><h3 id="_1-3-dubbo中的spi" tabindex="-1"><a class="header-anchor" href="#_1-3-dubbo中的spi" aria-hidden="true">#</a> <strong>1.3 Dubbo中的SPI</strong></h3><p>​ dubbo中大量的使用了SPI来作为扩展点，通过实现同一接口的前提下，可以进行定制自己的实现类。 比如比较常见的协议，负载均衡，都可以通过SPI的方式进行定制化，自己扩展。Dubbo中已经存在的所有已经实现好的扩展点。</p><p><img src="'+u+'" alt="1701498429521"></p><p>下图中则是Dubbo中默认提供的负载均衡策略。</p><p><img src="'+r+`" alt="1701498461003"></p><h3 id="_1-4-dubbo中扩展点使用方式" tabindex="-1"><a class="header-anchor" href="#_1-4-dubbo中扩展点使用方式" aria-hidden="true">#</a> 1.4 Dubbo中扩展点使用方式</h3><p>​ 我们使用三个项目来演示Dubbo中扩展点的使用方式，一个主项目main，一个服务接口项目api，一个服务实现项目impl。</p><p><strong>api 项目创建</strong></p><p>（1）导入坐标 dubbo</p><p>（2）创建接口</p><p>在接口上 使用@SPI</p><p><strong>impl项目创建</strong></p><p>（1）导入 api项目 的依赖</p><p>（2）建立实现类，为了表达支持多个实现的目的，这里分别创建两个实现。分别为 HumanHelloService 和 DogHelloService 。</p><p>（3）SPI进行声明操作，在 resources 目录下创建目录 META-INF/dubbo 目录，在目录下创建名称为 com.lagou.dubbo.study.spi.demo.api.HelloService的文件，文件内部配置两个实现类名称和对应的全限定名：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">human</span><span class="token punctuation">=</span><span class="token value attr-value">com.lagou.service.impl.HumanHelloService</span>
<span class="token key attr-name">dog</span><span class="token punctuation">=</span><span class="token value attr-value">com.lagou.service.impl.DogHelloService</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>main项目创建</strong></p><p>（1）导入坐标 接口项目 和 实现类项目</p><p>（2）创建DubboSpiMain</p><p>和原先调用的方式不太相同， dubbo 有对其进行自我重新实现 需要借助ExtensionLoader，创建新的运行项目。这里demo中的示例和java中的功能相同，查询出所有的已知实现，并且调用.</p><p>（3）dubbo自己做SPI的目的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. JDK 标准的 SPI 会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时，但如果没用上也加载，会很浪费资源.
2. 如果有扩展点加载失败，则所有扩展点无法使用.
3. 提供了对扩展点包装的功能(Adaptive)，并且还支持通过set的方式对其他的扩展点进行注入.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-dubbo-spi中的adaptive功能" tabindex="-1"><a class="header-anchor" href="#_1-5-dubbo-spi中的adaptive功能" aria-hidden="true">#</a> <strong>1.5 Dubbo SPI中的Adaptive功能</strong></h3><p>​ Dubbo中的Adaptive功能，主要解决的问题是如何动态的选择具体的扩展点。通过 getAdaptiveExtension 统一对指定接口对应的所有扩展点进行封装，通过URL的方式对扩展点来进行动态选择。 (dubbo中所有的注册信息都是通过URL的形式进行处理的。)这里同样采用相同的方式进行实现。</p><p>（1）创建接口</p><p>​ api中的 HelloService 扩展如下方法, 与原先类似，在sayHello中增加 Adaptive 注解，并且在参数中提供URL参数.注意这里的URL参数的类为 org.apache.dubbo.common.URL。其中@SP可以指定一个字符串参数，用于指明该SPI的默认实现。</p><p>（2）创建实现类</p><p>​ 与上面Service实现类代码相似，只需增加URL形参即可</p><p>（3）编写DubboAdaptiveMain</p><p>​ 最后在获取的时候方式有所改变，需要传入URL参数，并且在参数中指定具体的实现类参数如:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboAdaptiveMain</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;test://localhost/hello?hello.service=dog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">final</span> <span class="token class-name">HelloService</span> adaptiveExtension <span class="token operator">=</span>
		<span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">HelloService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdaptiveExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		adaptiveExtension<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>因为在这里只是临时测试，所以为了保证URL规范，前面的信息均为测试值即可，关键的点在于hello.service 参数，这个参数的值指定的就是具体的实现方式。关于为什么叫 hello.service 是因为这个接口的名称，其中后面的大写部分被dubbo自动转码为 . 分割。</li><li>通过 getAdaptiveExtension 来提供一个统一的类来对所有的扩展点提供支持(底层对所有的扩展点进行封装)。</li><li>调用时通过参数中增加 URL 对象来实现动态的扩展点使用。</li><li>如果URL没有提供该参数，则该方法会使用默认在 SPI 注解中声明的实现。</li></ul><h3 id="_1-6-dubbo调用时拦截操作" tabindex="-1"><a class="header-anchor" href="#_1-6-dubbo调用时拦截操作" aria-hidden="true">#</a> 1.6 Dubbo调用时拦截操作</h3><p>​ 与很多框架一样，Dubbo也存在拦截（过滤）机制，可以通过该机制在执行目标程序前后执行我们指定的代码。</p><p>​ Dubbo的Filter机制，是专门为服务提供方和服务消费方调用过程进行拦截设计的，每次远程方法执行，该拦截都会被执行。这样就为开发者提供了非常方便的扩展性，比如为dubbo接口实现ip白名单功能、监控功能 、日志记录等。</p><p>步骤如下：</p><p>（1）实现 org.apache.dubbo.rpc.Filter 接口</p><p>（2）使用 org.apache.dubbo.common.extension.Activate 接口进行对类进行注册 通过group 可以指定生产端 消费端 如:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span><span class="token constant">CONSUMER</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）计算方法运行时间的代码实现</p><p>（4）在 META-INF.dubbo 中新建 org.apache.dubbo.rpc.Filter 文件，并将当前类的全名写入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>timerFilter<span class="token operator">=</span>包名<span class="token punctuation">.</span>过滤器的名字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：一般类似于这样的功能都是单独开发依赖的，所以再使用方的项目中只需要引入依赖，在调用接口时，该方法便会自动拦截。</p><hr><h2 id="_2、负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_2、负载均衡策略" aria-hidden="true">#</a> 2、负载均衡策略</h2><h3 id="_2-1-负载均衡基本配置" tabindex="-1"><a class="header-anchor" href="#_2-1-负载均衡基本配置" aria-hidden="true">#</a> <strong>2.1</strong> <strong>负载均衡基本配置</strong></h3><p>​ 负载均衡（Load Balance）, 其实就是将请求分摊到多个操作单元上进行执行，从而共同完成工作任务。</p><p>​ 负载均衡策略主要用于客户端存在多个提供者时进行选择某个提供者。</p><p>​ 在集群负载均衡时，Dubbo 提供了多种均衡策略（包括随机、轮询、最少活跃调用数、一致性 Hash），缺省为random随机调用。</p><p>​ 配置负载均衡策略，既可以在服务提供者一方配置，也可以在服务消费者一方配置，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//在服务消费者一方配置负载均衡策略</span>
<span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>check <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>loadbalance <span class="token operator">=</span> <span class="token string">&quot;random&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//在服务提供者一方配置负载均衡</span>
<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>loadbalance <span class="token operator">=</span> <span class="token string">&quot;random&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>
		<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-自定义负载均衡器" tabindex="-1"><a class="header-anchor" href="#_2-2-自定义负载均衡器" aria-hidden="true">#</a> <strong>2.2</strong> <strong>自定义负载均衡器</strong></h3><p>​ 负载均衡器在Dubbo中的SPI接口是 org.apache.dubbo.rpc.cluster.LoadBalance , 可以通过实现这个接口来实现自定义的负载均衡规则。</p><p>（1）自定义负载均衡器</p><p>​ 在上一节的案例基础上创建名称为dubbo-spi-loadbalance的Maven模块，并创建负载均衡器 OnlyFirstLoadbalancer。这里功能只是简单的选取所有机器中的第一个(按照字母排序 + 端口排序)。</p><p>（2）配置负载均衡器</p><p>​ 在dubbo-spi-loadbalance工程的 META-INF/dubbo 目录下新建org.apache.dubbo.rpc.cluster.LoadBalance 文件，并将当前类的全名写入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>onlyFirst=包名.负载均衡器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）在服务提供者工程实现类中编写用于测试负载均衡效果的方法 启动不同端口时 方法返回的信息不同</p><p>（4）启动多个服务 要求他们使用同一个接口注册到同一个注册中心 但是他们的dubbo通信端口不同</p><p>（5）在服务消费方指定自定义负载均衡器 onlyFirst</p><p>（6）测试自定义负载均衡的效果</p><hr><h2 id="_3、异步调用" tabindex="-1"><a class="header-anchor" href="#_3、异步调用" aria-hidden="true">#</a> 3、异步调用</h2><p>​ Dubbo不只提供了堵塞式的的同步调用，同时提供了异步调用的方式。这种方式主要应用于提供者接口响应耗时明显，消费者端可以利用调用接口的时间去做一些其他的接口调用,利用 Future 模式来异步等待和获取结果即可。这种方式可以大大的提升消费者端的利用率。 目前这种方式可以通过XML的方式进行引入。</p><h3 id="_3-1-异步调用实现" tabindex="-1"><a class="header-anchor" href="#_3-1-异步调用实现" aria-hidden="true">#</a> <strong>3.1</strong> <strong>异步调用实现</strong></h3><p>（1）为了能够模拟等待，通过 int timeToWait参数，标明需要休眠多少毫秒后才会进行返回。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> timeToWait<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（2）接口实现 为了模拟调用耗时 可以让线程等待一段时间</p><p>（3）在消费者端，配置异步调用 注意消费端默认超时时间1000毫秒 如果提供端耗时大于1000毫秒会出现超时可以通过改变消费端的超时时间 通过timeout属性设置即可单位毫秒</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>helloService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.lagou.service.HelloService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sayHello<span class="token punctuation">&quot;</span></span> <span class="token attr-name">async</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）测试，我们休眠100毫秒，然后再去进行获取结果。方法在同步调用时的返回值是空，我们可以通过 RpcContext.getContext().getFuture() 来进行获取Future对象来进行后续的结果等待操作。</p><h3 id="_3-2-异步调用特殊说明" tabindex="-1"><a class="header-anchor" href="#_3-2-异步调用特殊说明" aria-hidden="true">#</a> <strong>3.2</strong> <strong>异步调用特殊说明</strong></h3><p>​ 需要特别说明的是，该方式的使用，请确保dubbo的版本在2.5.4及以后的版本使用。 原因在于在2.5.3及之前的版本使用的时候，会出现异步状态传递问题。</p><p>​ 比如我们的服务调用关系是 A -&gt; B -&gt; C , 这时候如果A向B发起了异步请求，在错误的版本时，B向C发起的请求也会连带的产生异步请求。这是因为在底层实现层面，他是通过 RPCContext 中的attachment 实现的。在A向B发起异步请求时，会在 attachment 中增加一个异步标示字段来表明异步等待结果。B在接受到A中的请求时，会通过该字段来判断是否是异步处理。但是由于值传递问题，B向C发起时同样会将该值进行传递，导致C误以为需要异步结果，导致返回空。这个问题在2.5.4及以后的版本进行了修正。</p><hr><h2 id="_4、线程池" tabindex="-1"><a class="header-anchor" href="#_4、线程池" aria-hidden="true">#</a> 4、线程池</h2><h3 id="_4-1-dubbo已有线程池" tabindex="-1"><a class="header-anchor" href="#_4-1-dubbo已有线程池" aria-hidden="true">#</a> 4.1 Dubbo已有线程池</h3><p>​ dubbo在使用时，都是通过创建真实的业务线程池进行操作的。目前已知的线程池模型有两个和java中的相互对应:</p><ul><li>fix: 表示创建固定大小的线程池。也是Dubbo默认的使用方式，默认创建的执行线程数为200，并且是没有任何等待队列的。所以再极端的情况下可能会存在问题，比如某个操作大量执行时，可能存在堵塞的情况。后面也会讲相关的处理办法。</li><li>cache: 创建非固定大小的线程池，当线程不足时，会自动创建新的线程。但是使用这种的时候需要注意，如果突然有高TPS的请求过来，方法没有及时完成，则会造成大量的线程创建，对系统的CPU和负载都是压力，执行越多反而会拖慢整个系统。</li></ul><h3 id="_4-2-自定义线程池" tabindex="-1"><a class="header-anchor" href="#_4-2-自定义线程池" aria-hidden="true">#</a> <strong>4.2</strong> <strong>自定义线程池</strong></h3><p>​ 在真实的使用过程中可能会因为使用fix模式的线程池，导致具体某些业务场景因为线程池中的线程数量不足而产生错误，而很多业务研发是对这些无感知的，只有当出现错误的时候才会去查看告警或者通过客户反馈出现严重的问题才去查看，结果发现是线程池满了。所以可以在创建线程池的时，通过某些手段对这个线程池进行监控，这样就可以进行及时的扩缩容机器或者告警。下面的这个程序就是这样子的，会在创建线程池后进行对其监控，并且及时作出相应处理。</p><p>（1）线程池实现, 这里主要是基于对 FixedThreadPool 中的实现做扩展出线程监控的部分</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WatchingThreadPool</span> <span class="token keyword">extends</span> <span class="token class-name">FixedThreadPool</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span>
            <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">WatchingThreadPool</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">ALARM_PERCENT</span> <span class="token operator">=</span> <span class="token number">0.90</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">&gt;</span></span> <span class="token constant">THREAD_POOLS</span> <span class="token operator">=</span> <span class="token keyword">new</span>
            <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">WatchingThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 每隔3秒打印线程使用情况</span>
        <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从父类中创建线程池</span>
        <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getExecutor</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token keyword">instanceof</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">THREAD_POOLS</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> executor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历线程池，如果超出指定的部分，进行操作，比如接入公司的告警系统或者短信平台</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> <span class="token constant">THREAD_POOLS</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">URL</span> url <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 当前执行中的线程数</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> activeCount <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 总计线程数</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> poolSize <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">double</span> used <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>activeCount <span class="token operator">/</span> poolSize<span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> usedNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>used <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;线程池执行状态:[{}/{}]:{}%&quot;</span><span class="token punctuation">,</span> activeCount<span class="token punctuation">,</span> poolSize<span class="token punctuation">,</span>
                    usedNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>used <span class="token operator">&gt;=</span> <span class="token constant">ALARM_PERCENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;超出警戒值！host:{}, 当前已使用量:{}%, URL:{}&quot;</span><span class="token punctuation">,</span>
                        url<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> usedNum<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）SPI声明，创建文件 META-INF/dubbo/org.apache.dubbo.common.threadpool.ThreadPool</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>watching=包名.线程池名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）在服务提供方项目引入该依赖</p><p>（4）在服务提供方项目中设置使用该线程池生成器</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dubbo.provider.threadpool=watching
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（5）接下来需要做的就是模拟整个流程，因为该线程当前是每1秒抓一次数据，所以我们需要对该方法的提供者超过1秒的时间(比如这里用休眠 Thread.sleep )，消费者则需要启动多个线程来并行执行，来模拟整个并发情况。</p><p>（6）在调用方则尝试简单通过for循环启动多个线程来执行 查看服务提供方的监控情况</p><h2 id="_5、路由规则" tabindex="-1"><a class="header-anchor" href="#_5、路由规则" aria-hidden="true">#</a> 5、路由规则</h2><p>​ 路由是决定一次请求中需要发往目标机器的重要判断，通过对其控制可以决定请求的目标机器。我们可以通过创建这样的规则来决定一个请求会交给哪些服务器去处理。</p><h3 id="_5-1路由规则快速入门" tabindex="-1"><a class="header-anchor" href="#_5-1路由规则快速入门" aria-hidden="true">#</a> 5.1路由规则快速入门</h3><p>（1）提供两个提供者(一台本机作为提供者，一台为其他的服务器)，每个提供者会在调用时可以返回不同的信息 以区分提供者。</p><p>（2）针对于消费者，我们这里通过一个死循环，每次等待用户输入，再进行调用，来模拟真实的请求情况。 通过调用的返回值 确认具体的提供者。</p><p>（3）我们通过ipconfig来查询到我们的IP地址，并且单独启动一个客户端，来进行如下配置(这里假设我们希望隔离掉本机的请求，都发送到另外一台机器上)。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboRouterMain</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RegistryFactory</span> registryFactory <span class="token operator">=</span> 
    <span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">RegistryFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdaptiveExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span>
              registryFactory<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;zookeeper://127.0.0.1:2181&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>
                <span class="token string">&quot;condition://0.0.0.0/com.lagou.service.HelloService?category=routers&amp;force=true&amp;dynamic=true&amp;rule=&quot;</span> <span class="token operator">+</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;=&gt; host != 你的机器ip不能是127.0.0.1&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）通过这个程序执行后，我们就通过消费端不停的发起请求，看到真实的请求都发到了除去本机以外的另外一台机器上。</p><h3 id="_5-2-路由规则详解" tabindex="-1"><a class="header-anchor" href="#_5-2-路由规则详解" aria-hidden="true">#</a> 5.2 路由规则详解</h3>`,110),m={href:"https://cn.dubbo.apache.org/zh-cn/overview/mannual/rust-sdk/router-module/",target:"_blank",rel:"noopener noreferrer"},b=s(`<p>route:// 表示路由规则的类型，支持条件路由规则和脚本路由规则，可扩展，<strong>必填</strong>。</p><p>0.0.0.0 表示对所有 IP 地址生效，如果只想对某个 IP 的生效，请填入具体 IP，<strong>必填</strong>。</p><p>com.lagou.service.HelloService 表示只对指定服务生效，<strong>必填</strong>。</p><p>category=routers 表示该数据为动态配置类型，<strong>必填</strong>。</p><p>dynamic : 是否为持久数据，当指定服务重启时是否继续生效。<strong>必填</strong>。</p><p>runtime : 是否在设置规则时自动缓存规则，如果设置为true则会影响部分性能。</p><p>rule : 是整个路由最关键的配置，用于配置路由规则。</p><p>... =&gt; ... 在这里 =&gt; 前面的就是表示消费者方的匹配规则，可以不填(代表全部)。 =&gt; 后方则必须填写，表示当请求过来时，如果选择提供者的配置。官方这块儿也给出了详细的示例，可以按照那里来讲。</p><p>其中使用最多的便是 host 参数。 <strong>必填</strong>。</p><h3 id="_5-3-路由与上线系统结合" tabindex="-1"><a class="header-anchor" href="#_5-3-路由与上线系统结合" aria-hidden="true">#</a> <strong>5.3</strong> <strong>路由与上线系统结合</strong></h3><p>​ 当公司到了一定的规模之后，一般都会有自己的上线系统，专门用于服务上线。方便后期进行维护和记录的追查。我们去想象这样的一个场景，一个dubbo的提供者要准备进行上线，一般都提供多台提供者来同时在线上提供服务。这时候一个请求刚到达一个提供者，提供者却进行了关闭操作。那么此次请求就应该认定为失败了。所以基于这样的场景，我们可以通过路由的规则，把预发布(灰度)的机器进行从机器列表中移除。并且等待一定的时间，让其把现有的请求处理完成之后再进行关闭服务。同时，在启 动时，同样需要等待一定的时间，以免因为尚未重启结束，就已经注册上去。等启动到达一定时间之后，再进行开启流量操作。</p><p><strong>实现主体思路</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.利用zookeeper的路径感知能力，在服务准备进行重启之前将当前机器的IP地址和应用名写入zookeeper。
2.服务消费者监听该目录，读取其中需要进行关闭的应用名和机器IP列表并且保存到内存中。
3.当前请求过来时，判断是否是请求该应用，如果是请求重启应用，则将该提供者从服务列表中移除。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）引入 Curator 框架，用于方便操作Zookeeper</p><p>（2）编写Zookeeper的操作类，用于方便进行zookeeper处理</p><p>（3）编写需要进行预发布的路径管理器，用于缓存和监听所有的待灰度机器信息列表。</p><p>（4）编写路由类(实现 org.apache.dubbo.rpc.cluster.Router )，主要目的在于对ReadyRestartInstances 中的数据进行处理，并且移除路由调用列表中正在重启中的服务。</p><p>（5）由于 Router 机制比较特殊，所以需要利用一个专门的 RouterFactory 来生成，原因在于并不是所有的都需要添加路由，所以需要利用 @Activate 来锁定具体哪些服务才需要生成使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Activate</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestartingInstanceRouterFactory</span> <span class="token keyword">implements</span> <span class="token class-name">RouterFactory</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Router</span> <span class="token function">getRouter</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestartingInstanceRouter</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（6）对 RouterFactory 进行注册，同样放入到META-INF/dubbo/org.apache.dubbo.rpc.cluster.RouterFactory 文件中。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">restartInstances</span><span class="token punctuation">=</span><span class="token value attr-value">com.lagou.router.RestartingInstanceRouterFactory</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（7）将dubbo-spi-router项目引入至 consumer 项目的依赖中。</p><p>（8）这时直接启动程序，还是利用上面中所写好的 consumer 程序进行执行，确认各个 provider 可以正常执行。</p><p>（9）单独写一个 main 函数来进行将某台实例设置为启动中的状态，比如这里我们认定为当前这台机器中的 service-provider 这个提供者需要进行重启操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ReadyRestartInstances</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addRestartingInstance</span><span class="token punctuation">(</span><span class="token string">&quot;service-provider&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;正在重新启动的机器IP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（10）执行完成后，再次进行尝试通过 consumer 进行调用，即可看到当前这台机器没有再发送任何请求</p><p>（11）一般情况下，当机器重启到一定时间后，我们可以再通过 removeRestartingInstance 方法对这个机器设定为既可以继续执行。</p><p>（12）调用完成后，我们再次通过 consumer 去调用，即可看到已经再次恢当前机器的请求参数。</p><hr><h2 id="_6、服务动态降级" tabindex="-1"><a class="header-anchor" href="#_6、服务动态降级" aria-hidden="true">#</a> 6、服务动态降级</h2><h3 id="_6-1-什么是服务降级" tabindex="-1"><a class="header-anchor" href="#_6-1-什么是服务降级" aria-hidden="true">#</a> 6.1 什么是服务降级</h3><p>​ 服务降级，当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务有策略的降低服务级别，以释放服务器资源，保证核心任务的正常运行。</p><h3 id="_6-2-为什么要服务降级" tabindex="-1"><a class="header-anchor" href="#_6-2-为什么要服务降级" aria-hidden="true">#</a> 6.2 为什么要服务降级</h3><p>​ 而为什么要使用服务降级，这是防止分布式服务发生雪崩效应，什么是雪崩？就是蝴蝶效应，当一个请求发生超时，一直等待着服务响应，那么在高并发情况下，很多请求都是因为这样一直等着响应，直到服务资源耗尽产生宕机，而宕机之后会导致分布式其他服务调用该宕机的服务也会出现资源耗尽宕机，这样下去将导致整个分布式服务都瘫痪，这就是雪崩。</p><h3 id="_6-3-dubbo-服务降级实现方式" tabindex="-1"><a class="header-anchor" href="#_6-3-dubbo-服务降级实现方式" aria-hidden="true">#</a> 6.3 dubbo 服务降级实现方式</h3><p>**第一种 在 dubbo 管理控制台配置服务降级 **</p><p><strong>屏蔽和容错</strong></p><ul><li><p>mock=force:return+null</p><p>表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</p></li><li><p>mock=fail:return+null</p><p>表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。</p></li></ul><p><img src="`+d+`" alt="1701521228532"></p><p><strong>第二种 指定返回简单值或者null</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">check</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.xx.XxService<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mock</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>return null<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxService2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">check</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.xx.XxService2<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mock</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>return 1234<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 如果是标注 则使用@Reference(mock=&quot;return null&quot;) @Reference(mock=&quot;return 简单值&quot;) 也支持 @Reference(mock=&quot;force:return null&quot;)</p><p><strong>第三种 使用java代码 动态写入配置中心</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RegistryFactory</span> registryFactory <span class="token operator">=</span>
<span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">RegistryFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdaptiveExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Registry</span> registry <span class="token operator">=</span> registryFactory<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;zookeeper://IP:端口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;override://0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第四种 整合整合 hystrix 会在后期SpringCloud课程中详细讲解</strong></p>`,45);function g(h,f){const t=p("ExternalLinkIcon");return o(),c("div",null,[v,a("p",null,[n("​ 通过上面的程序，我们实际本质上就是通过在zookeeper中保存一个节点数据，来记录路由规则。消费者会通过监听这个服务的路径，来感知整个服务的路由规则配置，然后进行适配。这里主要介绍路由配置的参数。具体"),a("a",m,[n("服务路由规则"),l(t)]),n(", 这里只对关键的参数做说明。")]),b])}const y=e(k,[["render",g],["__file","8.html.vue"]]);export{y as default};
