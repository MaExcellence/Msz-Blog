import{_ as n,o as s,c as a,b as e}from"./app-3bb1037e.js";const t="/assets/1699088396327-d99d1d07.png",p="/assets/1699088542449-0a173ff2.png",l="/assets/1699088838537-0d7c1966.png",o="/assets/1699089423184-76b37e42.png",c="/assets/1699089712900-30655d4c.png",i="/assets/1699090717984-2adb604d.png",u="/assets/1699100013698-0ca5cdab.png",r="/assets/1699100072710-35a9d94e.png",d="/assets/1699100146905-509e6ffd.png",k="/assets/1699100446050-192b92a5.png",m="/assets/1699100654884-7faa3bec.png",v="/assets/1699100764131-c6a2aacf.png",b="/assets/1699100813089-5eb6c770.png",g="/assets/1699101103564-f6d4af21.png",y="/assets/1699102401941-38005190.png",h={},S=e('<h2 id="_7-2-sca-sentinel-分布式系统的流量防卫兵" tabindex="-1"><a class="header-anchor" href="#_7-2-sca-sentinel-分布式系统的流量防卫兵" aria-hidden="true">#</a> <strong>7.2 SCA Sentinel</strong> <strong>分布式系统的流量防卫兵</strong></h2><h3 id="_7-2-1-sentinel-介绍" tabindex="-1"><a class="header-anchor" href="#_7-2-1-sentinel-介绍" aria-hidden="true">#</a> <strong>7.2.1 Sentinel</strong> <strong>介绍</strong></h3><p>Sentinel是⼀个面向云原⽣微服务的流量控制、熔断降级组件。</p><p>替代Hystrix，针对问题：服务雪崩、服务降级、服务熔断、服务限流</p><p>Hystrix：</p><p>服务消费者（自动投递微服务）—&gt;调⽤服务提供者（简历微服务）</p><p>在调用方引入Hystrix—&gt; 单独搞了⼀个Dashboard项目—&gt;Turbine</p><p>1）自己搭建监控平台 dashboard</p><p>2）没有提供UI界⾯进⾏服务熔断、服务降级等配置（⽽是写代码，⼊侵了我们源程序环境）</p><p>Sentinel：</p><p>1）独⽴可部署Dashboard/控制台组件</p><p>2）减少代码开发，通过UI界⾯配置即可完成细粒度控制（⾃动投递微服务）</p><p><img src="'+t+'" alt="1699088396327"></p><p>Sentinel 分为两个部分:</p><ul><li>核心库：（Java 客户端）不依赖任何框架/库，能够运⾏于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li><li>控制台：（Dashboard）基于 Spring Boot 开发，打包后可以直接运⾏，不需要额外的 Tomcat 等应用容器。</li></ul><hr><p>Sentinel 具有以下特征:</p><p><strong>丰富的应⽤场景</strong>：Sentinel 承接了阿⾥巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、 集群流量控制、实时熔断下游不可用应用等。</p><p><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接⼊应⽤的单台机器秒级数据，甚⾄ 500 台以下规模的集群的汇总运⾏情况。</p><p><strong>广泛的开源⽣态</strong>：Sentinel 提供开箱即⽤的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo的整合。您只需要引⼊相应的依赖并进⾏简单的配置即可快速地接⼊ Sentinel。</p><p><strong>完善的</strong> <strong>SPI</strong> <strong>扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接⼝。您可以通过实现扩展接⼝来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</p><hr><p>Sentinel 的主要特性：</p><p><img src="'+p+'" alt="1699088542449"></p><h3 id="_7-2-2-sentinel-部署" tabindex="-1"><a class="header-anchor" href="#_7-2-2-sentinel-部署" aria-hidden="true">#</a> <strong>7.2.2 Sentinel</strong> <strong>部署</strong></h3><p>下载地址：https://github.com/alibaba/Sentinel/releases 我们使⽤v1.7.1</p><p>启动：java -jar sentinel-dashboard-1.7.1.jar &amp;</p><p>用户名/密码：sentinel/sentinel</p><p><img src="'+l+`" alt="1699088838537"></p><h3 id="_7-2-3-服务改造" tabindex="-1"><a class="header-anchor" href="#_7-2-3-服务改造" aria-hidden="true">#</a> <strong>7.2.3</strong> <strong>服务改造</strong></h3><p>在我们已有的业务场景中，“⾃动投递微服务”调⽤了“简历微服务”，我们在自动投递微服务进⾏的熔断降级等控制，那么接下来我们改造⾃动投递微服务，引入Sentinel 核心包。</p><p>为了不污染之前的代码，复制⼀个自动投递微服务 lagou-service-autodeliver- 8098-sentinel</p><ul><li>pom.xml引⼊依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--sentinel核心环境依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>application.yml修改（配置sentinel dashboard，暴露断点依然要有，删除原有hystrix配置，删除原有OpenFeign的降级配置）</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
 <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8098</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">application</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> lagou<span class="token punctuation">-</span>service<span class="token punctuation">-</span>autodeliver
 <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
   <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
    <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
   <span class="token key atrule">transport</span><span class="token punctuation">:</span>
    <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8080</span> <span class="token comment"># sentinel dashboard/console地址</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span> <span class="token comment"># sentinel会在该端⼝启动http server，那么这样的话，控制台定义的⼀些限流等规则才能发送传递过来，#如果8719端⼝被占⽤，那么会依次+1</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
 <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
   <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
    <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
 <span class="token comment"># 暴露健康接⼝的细节</span>
 <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>
  <span class="token key atrule">health</span><span class="token punctuation">:</span>
   <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always
   <span class="token comment">#针对的被调⽤⽅微服务名称,不加就是全局⽣效</span>
<span class="token key atrule">lagou-service-resume</span><span class="token punctuation">:</span>
 <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token comment">#请求连接超时时间</span>
  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>
  <span class="token comment">#请求处理超时时间</span>
  <span class="token comment">##########################################Feign超时时⻓设置</span>
  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">3000</span>
  <span class="token comment">#对所有操作都进⾏重试</span>
  <span class="token key atrule">OkToRetryOnAllOperations</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment">####根据如上配置，当访问到故障请求的时候，它会再尝试访问⼀次当前实例（次数由MaxAutoRetries配置），</span>
 <span class="token comment">####如果不⾏，就换⼀个实例进⾏访问，如果还不⾏，再换⼀次实例访问（更换次数由MaxAutoRetriesNextServer配置），</span>
 <span class="token comment">####如果依然不⾏，返回失败信息。</span>
  <span class="token key atrule">MaxAutoRetries</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">#对当前选中实例重试次数，不包括第⼀次调⽤</span>
  <span class="token key atrule">MaxAutoRetriesNextServer</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">#切换实例的重试次数</span>
  <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RoundRobinRule <span class="token comment">#负载策略调整</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
 <span class="token key atrule">level</span><span class="token punctuation">:</span>
  <span class="token comment"># Feign⽇志只会对⽇志级别为debug的做出响应</span>
  com.lagou.edu.controller.service.ResumeServiceFeignClient<span class="token punctuation">:</span>debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上述配置之后，启动⾃动投递微服务，使⽤ Sentinel 监控⾃动投递微服务</li></ul><p>此时我们发现控制台没有任何变化，因为懒加载，我们只需要发起⼀次请求触发即可</p><p><img src="`+o+'" alt="1699089423184"></p><h3 id="_7-2-4-sentinel-关键概念" tabindex="-1"><a class="header-anchor" href="#_7-2-4-sentinel-关键概念" aria-hidden="true">#</a> <strong>7.2.4 Sentinel 关键概念</strong></h3><table><thead><tr><th style="text-align:center;">概念名称</th><th style="text-align:center;">概念描述</th></tr></thead><tbody><tr><td style="text-align:center;">资源</td><td style="text-align:center;">它可以是 Java 应⽤程序中的任何内容，例如，由应⽤程序提供的服务，或由应用程序调用的其它应用提供的服务，甚⾄可以是⼀段代码。我们请求的API接⼝就是资源</td></tr><tr><td style="text-align:center;">规则</td><td style="text-align:center;">围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</td></tr></tbody></table><h3 id="_7-2-5-sentinel-流量规则模块" tabindex="-1"><a class="header-anchor" href="#_7-2-5-sentinel-流量规则模块" aria-hidden="true">#</a> <strong>7.2.5 Sentinel</strong> <strong>流量规则模块</strong></h3><p>系统并发能⼒有限，⽐如系统A的QPS⽀持1个，如果太多请求过来，那么A就应该进行流量控制了，比如其他请求直接拒绝。</p><p><img src="'+c+'" alt="1699089712900"></p><ul><li><p><strong>资源名</strong>：默认请求路径</p></li><li><p><strong>针对来源</strong>：Sentinel可以针对调⽤者进⾏限流，填写微服务名称，默认default（不区分来源）</p></li><li><p><strong>阈值类型/单机阈值</strong></p></li></ul><ol><li>QPS：（每秒钟请求数量）当调⽤该资源的QPS达到阈值时进⾏限流</li><li>线程数：当调用该资源的线程数达到阈值的时候进行限流（线程处理请求的时候，如果说业务逻辑执行时间很长，流量洪峰来临时，会耗费很多线程资源，这些线程资源会堆积，最终可能造成服务不可用，进⼀步上游服务不可⽤，最终可能服务雪崩）</li></ol><ul><li><p>是否集群：是否集群限流</p></li><li><p>流控模式：</p></li></ul><ol><li>直接：资源调用达到限流条件时，直接限流</li><li>关联：关联的资源调⽤达到阈值时候限流自己</li><li>链路：只记录指定链路上的流量</li></ol><ul><li><p>流控效果：</p></li><li><p>快速失败：直接失败，抛出异常</p></li><li><p>Warm Up：根据冷加载因⼦（默认3）的值，从阈值/冷加载因⼦，经过预热时长，才达到设置的QPS阈值</p></li><li><p>排队等待：匀速排队，让请求匀速通过，阈值类型必须设置为QPS，否则⽆效</p></li><li><p>流控模式之关联限流</p><p>关联的资源调⽤达到阈值时候限流自己，比如用户注册接口，需要调用身份证校验接口（往往身份证校验接口），如果身份证校验接口请求达到阈值，使用关联，可以对用户注册接口进行限流。</p></li></ul><p><img src="'+i+`" alt="1699090717984"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ResumeServiceFeignClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
 <span class="token doc-comment comment">/**
 * ⽤户注册接口
 * <span class="token keyword">@return</span>
 */</span>
 <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/register&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Register success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token string">&quot;Register success!&quot;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
    
 <span class="token doc-comment comment">/**
 * 验证注册身份证接⼝（需要调⽤公安户籍资源）
 * <span class="token keyword">@return</span>
 */</span>
 <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/validateID&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findResumeOpenState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;validateID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token string">&quot;ValidateID success!&quot;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模拟密集式请求/user/validateID验证接⼝，我们会发现/user/register接⼝也被限流了</p><p><strong>流控模式之链路限流</strong></p><p>链路指的是请求链路（调⽤链）</p><p>链路模式下会控制该资源所在的调⽤链路⼊⼝的流量。需要在规则中配置入口资源，即该调⽤链路⼊⼝的上下⽂名称。</p><p>⼀棵典型的调⽤树如下图所示：（阿⾥云提供）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>	 	 machine-root
      	  /      \\
     	 /         \\
 	Entrance1     Entrance2
 	   /              \\
     /                 \\
 DefaultNode(nodeA)  DefaultNode(nodeA)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+'" alt="1699100013698"></p><p>​ 上图中来⾃入口 Entrance1 和 Entrance2 的请求都调⽤到了资源 NodeA ， Sentinel 允许只根据某个调⽤入口的统计信息对资源限流。比如链路模式下设置⼊⼝资源为 Entrance1 来表示只有从⼊⼝ Entrance1 的调⽤才会记录到 NodeA 的限流统计当中，⽽不关⼼经 Entrance2 到来的调⽤。</p><p><img src="'+r+'" alt="1699100072710"></p><p><strong>流控效果之 Warm up</strong></p><p>当系统⻓期处于空闲的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮，比如电商网站的秒杀模块。</p><p>通过 Warm Up 模式（预热模式），让通过的流量缓慢增加，经过设置的预热时间以后，到达系统处理请求速率的设定值。</p><p>Warm Up 模式默认会从设置的 QPS 阈值的 1/3 开始慢慢往上增加⾄ QPS 设置值。</p><p><img src="'+d+'" alt="1699100146905"></p><p><strong>流控效果之排队等待</strong></p><p>排队等待模式下会严格控制请求通过的间隔时间，即请求会<strong>匀速</strong>通过，允许部分请求排队等待，通常⽤于消息队列削峰填⾕等场景。需设置具体的超时时间，当计算的等待时间超过超时时间时请求就会被拒绝。</p><p>很多流量过来了，并不是直接拒绝请求，而是请求进⾏排队，⼀个⼀个匀速通过（处理），请求能等就等着被处理，不能等（等待时间&gt;超时时间）就会被拒绝</p><p>例如，QPS 配置为 5，则代表请求每 200 ms 才能通过⼀个，多出的请求将排队等 待通过。超时时间代表最⼤排队时间，超出最⼤排队时间的请求将会直接被拒绝。排队等待模式下，QPS 设置值不要超过 1000（请求间隔 1 ms）。</p><h3 id="_7-2-6-sentinel-降级规则模块" tabindex="-1"><a class="header-anchor" href="#_7-2-6-sentinel-降级规则模块" aria-hidden="true">#</a> <strong>7.2.6 Sentinel 降级规则模块</strong></h3><p>流控是对外部来的⼤流量进⾏控制，熔断降级的视⻆是对内部问题进行处理。</p><p>Sentinel 降级会在调⽤链路中某个资源出现不稳定状态时（例如调⽤超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。当资源被降级后，在接下来的降级时间窗⼝之内，对该资源的调用都自动熔断.</p><p><strong>=======&gt;&gt;&gt;&gt;</strong> <strong>这里的降级其实是Hystrix中的熔断</strong></p><p>还记得当时Hystrix的⼯作流程么</p><p><img src="'+k+'" alt="1699100446050"></p><p><strong>策略</strong></p><p>Sentinel不会像Hystrix那样放过⼀个请求尝试⾃我修复，就是明明确确按照时间窗口来，熔断触发后，时间窗口内拒绝请求，时间窗⼝后就恢复。</p><ul><li>RT（平均响应时间 ）</li></ul><p>​ 当 1s 内持续进⼊ &gt;=5 个请求，平均响应时间超过阈值（以 ms 为单位），那么在接下的时间窗⼝（以 s 为单位）之内，对这个⽅法的调⽤都会自动地熔断（抛出 DegradeException）。注意 Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项 - Dcsp.sentinel.statistic.max.rt=xxx 来配置。</p><p><img src="'+m+'" alt="1699100654884"></p><ul><li><strong>异常比例</strong></li></ul><p>​ 当资源的每秒请求量 &gt;= 5，并且每秒异常总数占通过量的⽐值超过阈值之后，资源进⼊降级状态，即在接下的时间窗⼝（以 s 为单位）之内，对这个⽅法的调用都会自动地返回。异常⽐率的阈值范围是 [0.0, 1.0] ，代表 0% - 100%。</p><p><img src="'+v+'" alt="1699100764131"></p><ul><li><strong>异常数</strong></li></ul><p>当资源近 1 分钟的异常数⽬超过阈值之后会进⾏熔断。注意由于统计时间窗口是分钟级别的，若 timeWindow 小于 60s，则结束熔断状态后仍可能再进⼊熔断状态。</p><p>时间窗口 &gt;= 60s</p><p><img src="'+b+`" alt="1699100813089"></p><p><strong>7.2.7 Sentinel 自定义兜底逻辑</strong></p><p>@SentinelResource注解类似于Hystrix中的@HystrixCommand注解</p><p>@SentinelResource注解中有两个属性需要我们进行区分，blockHandler属性用来指定不满⾜Sentinel规则的降级兜底⽅法，fallback属性⽤于指定Java运⾏时异常兜底方法</p><ul><li><strong>在API接口资源处配置</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* @SentinelResource
 value：定义资源名
 blockHandlerClass：指定Sentinel规则异常兜底逻辑所在class类
 blockHandler：指定Sentinel规则异常兜底逻辑具体哪个⽅法
 fallbackClass：指定Java运⾏时异常兜底逻辑所在class类
 fallback：指定Java运⾏时异常兜底逻辑具体哪个⽅法
*/</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/checkState/{userId}&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">&quot;findResumeOpenState&quot;</span><span class="token punctuation">,</span>blockHandlerClass <span class="token operator">=</span>
<span class="token class-name">SentinelFallbackClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">&quot;handleException&quot;</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span>
<span class="token string">&quot;handleError&quot;</span><span class="token punctuation">,</span>fallbackClass <span class="token operator">=</span> <span class="token class-name">SentinelFallbackClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">findResumeOpenState</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 模拟降级：</span>
 <span class="token comment">/*try {
 Thread.sleep(1000);
 } catch (InterruptedException e) {
 e.printStackTrace();
 }*/</span>
 <span class="token comment">// 模拟降级：异常⽐例</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> defaultResumeState <span class="token operator">=</span> resumeServiceFeignClient<span class="token punctuation">.</span><span class="token function">findDefaultResumeState</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> defaultResumeState<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>**自定义兜底逻辑类 **</li></ul><p>注意：兜底类中的⽅法为static静态⽅法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span></span><span class="token class-name">BlockException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelHandlersClass</span> <span class="token punctuation">{</span>
 <span class="token comment">// 整体要求和当时Hystrix⼀样，这⾥还需要在形参最后添加 BlockException参数，⽤于接收异常</span>
 <span class="token comment">// 注意：⽅法是静态的</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span><span class="token class-name">BlockException</span> blockException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
    
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>7.2.9</strong> <strong>基于</strong> <strong>Nacos</strong> <strong>实现</strong> <strong>Sentinel</strong> <strong>规则持久化</strong></p><p>目前，Sentinel Dashboard中添加的规则数据存储在内存，微服务停掉规则数据就消失，在生产环境下不合适。我们可以将Sentinel规则数据持久化到Nacos配置中心，让微服务从Nacos获取规则数据。</p><p><img src="`+g+`" alt="1699101103564"></p><ul><li>自动投递微服务的pom.xml中添加依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Sentinel⽀持采⽤ Nacos 作为规则配置数据源，引⼊该适配依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自动投递微服务的application.yml中配置Nacos数据源</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">application</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> lagou<span class="token punctuation">-</span>service<span class="token punctuation">-</span>autodeliver
 <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
   <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
    <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span><span class="token punctuation">,</span>127.0.0.1<span class="token punctuation">:</span><span class="token number">8849</span><span class="token punctuation">,</span>127.0.0.1<span class="token punctuation">:</span><span class="token number">8850</span>
 <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
  <span class="token key atrule">transport</span><span class="token punctuation">:</span>
   <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8080</span> <span class="token comment"># sentinel dashboard/console地址</span>
   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span> <span class="token comment"># sentinel会在该端⼝启动http server，那么这样的话，控制台定义的⼀些限流等规则才能发送传递过来，</span>
 <span class="token comment">#如果8719端⼝被占⽤，那么会依次+1</span>
 <span class="token comment"># Sentinel Nacos数据源配置，Nacos中的规则会⾃动同步到sentinel控制台的流控规则中</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
 <span class="token comment"># 此处的flow为⾃定义数据源名</span>
   <span class="token key atrule">flow</span><span class="token punctuation">:</span> <span class="token comment"># 流控规则</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
     <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.discovery.serveraddr<span class="token punctuation">}</span>
     <span class="token key atrule">data-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">-</span>flow<span class="token punctuation">-</span>rules
     <span class="token key atrule">groupId</span><span class="token punctuation">:</span> DEFAULT_GROUP
     <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json
     <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow <span class="token comment"># 类型来⾃RuleType类</span>
   <span class="token key atrule">degrade</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
     <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.discovery.serveraddr<span class="token punctuation">}</span>
     <span class="token key atrule">data-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">-</span>degrade<span class="token punctuation">-</span>rules
     <span class="token key atrule">groupId</span><span class="token punctuation">:</span> DEFAULT_GROUP
     <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json
     <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> degrade <span class="token comment"># 类型来⾃RuleType类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos Server中添加对应规则配置集（public命名空间—&gt;DEFAULT_GROUP中添加）</p><p>流控规则配置集 lagou-service-autodeliver-flow-rules</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
 <span class="token punctuation">{</span>
 
 <span class="token property">&quot;resource&quot;</span><span class="token operator">:</span><span class="token string">&quot;findResumeOpenState&quot;</span><span class="token punctuation">,</span>
 <span class="token property">&quot;limitApp&quot;</span><span class="token operator">:</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
 <span class="token property">&quot;grade&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
 <span class="token property">&quot;count&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
 <span class="token property">&quot;strategy&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
 <span class="token property">&quot;controlBehavior&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
 <span class="token property">&quot;clusterMode&quot;</span><span class="token operator">:</span><span class="token boolean">false</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>所有属性来自源码FlowRule类</strong></p><ul><li>resource：资源名称</li><li>limitApp：来源应⽤</li><li>grade：阈值类型 0 线程数 1 QPS</li><li>count：单机阈值</li><li>strategy：流控模式，0 直接 1 关联 2 链路</li><li>controlBehavior：流控效果，0 快速失败 1 Warm Up 2 排队等待</li><li>clusterMode：true/false 是否集群</li></ul><p>降级规则配置集 lagou-service-autodeliver-degrade-rules</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
 <span class="token punctuation">{</span>
 
 <span class="token property">&quot;resource&quot;</span><span class="token operator">:</span><span class="token string">&quot;findResumeOpenState&quot;</span><span class="token punctuation">,</span>
 <span class="token property">&quot;grade&quot;</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
 <span class="token property">&quot;count&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
 <span class="token property">&quot;timeWindow&quot;</span><span class="token operator">:</span><span class="token number">5</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>所有属性来自源码DegradeRule类</strong></p><ul><li>resource：资源名称</li><li>grade：降级策略 0 RT 1 异常⽐例 2 异常数</li><li>count：阈值</li><li>timeWindow：时间窗</li></ul><p><strong>Rule 源码体系结构</strong></p><p><img src="`+y+'" alt="1699102401941"></p><p><strong>注意</strong></p><p>1）⼀个资源可以同时有多个限流规则和降级规则，所以配置集中是⼀个json数组</p><p>2）Sentinel控制台中修改规则，仅是内存中⽣效，不会修改Nacos中的配置值，重启后恢复原来的值； Nacos控制台中修改规则，不仅内存中⽣效，Nacos中持久化规则也⽣效，重启后规则依然保持。</p>',116),f=[S];function x(_,q){return s(),a("div",null,f)}const R=n(h,[["render",x],["__file","72.html.vue"]]);export{R as default};
