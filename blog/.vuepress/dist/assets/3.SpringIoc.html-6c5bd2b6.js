const e=JSON.parse('{"key":"v-a733d862","path":"/blogs/spring/3.SpringIoc.html","title":"Spring IOC源码深度解析","lang":"en-US","frontmatter":{"title":"Spring IOC源码深度解析","date":"2022/07/05","tags":["Spring IOC源码深度解析"],"categories":["Spring","原理深入及源码剖析"]},"headers":[{"level":2,"title":"1.1 Spring IoC的容器体系","slug":"_1-1-spring-ioc的容器体系","link":"#_1-1-spring-ioc的容器体系","children":[]},{"level":2,"title":"1.2 Bean生命周期关键时机点","slug":"_1-2-bean生命周期关键时机点","link":"#_1-2-bean生命周期关键时机点","children":[]},{"level":2,"title":"1.3 Spring IoC容器初始化主流程","slug":"_1-3-spring-ioc容器初始化主流程","link":"#_1-3-spring-ioc容器初始化主流程","children":[]},{"level":2,"title":"2.1 获取BeanFactory子流程","slug":"_2-1-获取beanfactory子流程","link":"#_2-1-获取beanfactory子流程","children":[]},{"level":2,"title":"2.2 BeanDefifinition加载解析及注册⼦流程","slug":"_2-2-beandefifinition加载解析及注册子流程","link":"#_2-2-beandefifinition加载解析及注册子流程","children":[]},{"level":2,"title":"5.1 什么是循环依赖","slug":"_5-1-什么是循环依赖","link":"#_5-1-什么是循环依赖","children":[]},{"level":2,"title":"5.2 循环依赖处理机制","slug":"_5-2-循环依赖处理机制","link":"#_5-2-循环依赖处理机制","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/spring/3.SpringIoc.md"}');export{e as data};
