import{_ as s,r as a,o as t,c as p,e,b as o}from"./app-1f8a5ff3.js";const c="/msz-blog/assets/1696861382075-8f30e57f.png",l="/msz-blog/assets/1696861624811-46856be0.png",i="/msz-blog/assets/1696863629159-e268da81.png",u="/msz-blog/assets/1696863690205-1c3f4a03.png",r="/msz-blog/assets/1696863722718-c6d89e95.png",k="/msz-blog/assets/1696864954676-eb401c9a.png",d="/msz-blog/assets/1696864974487-2acb6bf1.png",m="/msz-blog/assets/1696864988808-be882751.png",v="/msz-blog/assets/1696865123270-a3a7b707.png",g="/msz-blog/assets/1696865289276-011c92c1.png",b="/msz-blog/assets/1696865332139-cafd8d02.png",y="/msz-blog/assets/1696865359325-86326c96.png",f="/msz-blog/assets/1696866033801-5edbcebc.png",h="/msz-blog/assets/1696866058219-a8afbc7b.png",_="/msz-blog/assets/1696867053481-f1e69540.png",w="/msz-blog/assets/1696867303578-7885e0e9.png",S="/msz-blog/assets/1696945761609-ece1a8b5.png",E="/msz-blog/assets/1696945783411-ec1f2211.png",x="/msz-blog/assets/1696946325739-458248e3.png",I="/msz-blog/assets/1696946450859-38793a16.png",C="/msz-blog/assets/1696946471395-144ab850.png",A="/msz-blog/assets/1696946564159-cc9b8111.png",z="/msz-blog/assets/1696946578527-87bebcef.png",R="/msz-blog/assets/1696946624129-6685e5ce.png",L="/msz-blog/assets/1696946638177-ebef6c80.png",T="/msz-blog/assets/1696946661836-cab99262.png",N="/msz-blog/assets/1696946679142-76dc24d7.png",P="/msz-blog/assets/1696946696253-dc9ed542.png",M="/msz-blog/assets/1696946723066-e0a2a7a3.png",j="/msz-blog/assets/1696946762392-a76f4c2b.png",q="/msz-blog/assets/1696946789656-804c846d.png",D="/msz-blog/assets/1696946811497-1f5e2852.png",B="/msz-blog/assets/1696946833986-76df6fcc.png",U="/msz-blog/assets/1696946856878-679355b0.png",O="/msz-blog/assets/1696946882168-e26fde56.png",F="/msz-blog/assets/1696946903489-26eb95bc.png",H="/msz-blog/assets/1696946955464-911bfa94.png",J="/msz-blog/assets/1696946975102-965f4342.png",Z="/msz-blog/assets/1696947004207-c435546c.png",V="/msz-blog/assets/1696947048397-d08fa878.png",$="/msz-blog/assets/1696947070968-50400bf9.png",G="/msz-blog/assets/1696949731664-18713a46.png",W="/msz-blog/assets/1696949780612-a1d25448.png",K="/msz-blog/assets/1696949794394-c365c3e2.png",Q="/msz-blog/assets/1696949817205-bdba4707.png",Y="/msz-blog/assets/1696950047486-893f8532.png",X="/msz-blog/assets/1696950068331-a2383edd.png",nn="/msz-blog/assets/1696950086272-aefceb79.png",sn="/msz-blog/assets/1696950121556-eefdf205.png",an="/msz-blog/assets/1696950175087-4fd209f9.png",tn="/msz-blog/assets/1696950202313-f62d46d4.png",pn="/msz-blog/assets/1696950225976-d5913e1d.png",en="/msz-blog/assets/1696950245313-62b58a74.png",on="/msz-blog/assets/1696950270577-efe298a6.png",cn="/msz-blog/assets/1696950290440-51cfe82d.png",ln="/msz-blog/assets/1696950310984-5edeff12.png",un="/msz-blog/assets/1696950336739-4ff0584f.png",rn="/msz-blog/assets/1696950356114-a81306d8.png",kn="/msz-blog/assets/1696950388744-49749cb5.png",dn="/msz-blog/assets/1696950400614-5466d41f.png",mn="/msz-blog/assets/1696950414750-00d27481.png",vn="/msz-blog/assets/1696950425641-2aab1287.png",gn="/msz-blog/assets/1696950447541-8eb7a299.png",bn="/msz-blog/assets/1696950466761-3c0e5792.png",yn="/msz-blog/assets/1696950488214-8afad479.png",fn="/msz-blog/assets/1696950508890-299650d5.png",hn="/msz-blog/assets/1696950528601-0a8f0de6.png",_n="/msz-blog/assets/1696950552459-48c8af93.png",wn="/msz-blog/assets/1696950571554-ffa0aa36.png",Sn="/msz-blog/assets/1696950591349-2fbed7c1.png",En="/msz-blog/assets/1696950628719-92ae8fd3.png",xn="/msz-blog/assets/1696950650415-38d74dac.png",In="/msz-blog/assets/1696950689530-fe954582.png",Cn="/msz-blog/assets/1696950745088-9b6d1e7f.png",An="/msz-blog/assets/1696950759772-be231823.png",zn="/msz-blog/assets/1696950774750-6a6e1c4c.png",Rn={},Ln=o('<p>说明：上⾯提到⽹关组件Zuul性能⼀般，未来将退出Spring Cloud ⽣态圈，所以我们直接讲解GateWay，在课程章节规划时，我们就把GateWay划分到第⼀代Spring Cloud 核⼼组件这⼀部分了。</p><p>各组件整体结构如下：</p><p><img src="'+c+'" alt="1696861382075"></p><p>从形式上来说，Feign⼀个顶三，Feign = RestTemplate + Ribbon + Hystrix</p><hr><h1 id="第-1-节-eureka-服务注册中心" tabindex="-1"><a class="header-anchor" href="#第-1-节-eureka-服务注册中心" aria-hidden="true">#</a> <strong>第 1 节</strong> Eureka 服务注册中心</h1><h2 id="_1-1-关于服务注册中心" tabindex="-1"><a class="header-anchor" href="#_1-1-关于服务注册中心" aria-hidden="true">#</a> <strong>1.1</strong> <strong>关于服务注册中心</strong></h2><p><strong>注意：服务注册中心本质上是为了解耦服务提供者和服务消费者。</strong></p><p>对于任何⼀个微服务，原则上都应存在或者⽀持多个提供者（⽐如简历微服务部署多个实例），这是由微服务的<strong>分布式属性</strong>决定的。</p><p>更进⼀步，为了⽀持弹性扩缩容特性，⼀个微服务的提供者的数量和分布往往是动态变化的，也是⽆法预先确定的。因此，原本在单体应⽤阶段常⽤的静态LB机制就</p><p>不再适⽤了，需要引⼊额外的组件来管理微服务提供者的注册与发现，⽽这个组件就是服务注册中心。</p><h3 id="_1-1-1-服务注册中心一般原理" tabindex="-1"><a class="header-anchor" href="#_1-1-1-服务注册中心一般原理" aria-hidden="true">#</a> <strong>1.1.1</strong> <strong>服务注册中心⼀般原理</strong></h3><p><img src="'+l+'" alt="1696861624811"></p><p>分布式微服务架构中，服务注册中⼼⽤于存储服务提供者地址信息、服务发布相关的属性信息，消费者通过主动查询和被动通知的⽅式获取服务提供者的地址信息，而不再需要通过硬编码⽅式得到提供者的地址信息。消费者只需要知道当前系统发布了那些服务，而不需要知道服务具体存在于什么位置，这就是透明化路由。</p><p>1）服务提供者启动</p><p>2）服务提供者将相关服务信息主动注册到注册中⼼</p><p>3）服务消费者获取服务注册信息：</p><p>pull模式：服务消费者可以主动拉取可⽤的服务提供者清单</p><p>push模式：服务消费者订阅服务（当服务提供者有变化时，注册中⼼也会主动推送更新后的服务清单给消费者</p><p>4）服务消费者直接调⽤服务提供者</p><p>另外，注册中⼼也需要完成服务提供者的健康监控，当发现服务提供者失效时需要及时剔除。</p><hr><h3 id="_1-1-2-主流服务中心对比" tabindex="-1"><a class="header-anchor" href="#_1-1-2-主流服务中心对比" aria-hidden="true">#</a> <strong>1.1.2</strong> <strong>主流服务中心对比</strong></h3><ul><li><strong>Zookeeper</strong></li></ul><p>​ Zookeeper它是⼀个分布式服务框架，是Apache Hadoop 的⼀个⼦项⽬，它主要是⽤来解决分布式应 ⽤中经常遇到的⼀些数据管理问题，如：统⼀命名服务、状态同步服务、集群管理、分布式应⽤配置项的管理等。 简单来说zookeeper本质=存储+监听通知。</p><p>znode</p><p>​ Zookeeper ⽤来做服务注册中⼼，主要是因为它具有节点变更通知功能，只要客户端监听相关服务节点，服务节点的所有变更，都能及时的通知到监听客户端，这样作为调⽤⽅只要使⽤ Zookeeper 的客户端就能实现服务节点的订阅和变更通知功能了，⾮常⽅便。另外，Zookeeper 可⽤性也可以，因为只要半数以上的选举节点存活，整个集群就是可⽤的。</p><ul><li><strong>Eureka</strong></li></ul><p>​ 由Netflix开源，并被Pivatal集成到SpringCloud体系中，它是基于 RestfulAPI 风格开发的服务注册与发现组件。</p><ul><li><strong>Consul</strong></li></ul><p>​ Consul是由HashiCorp基于Go语⾔开发的⽀持多数据中⼼分布式⾼可⽤的服务发布和注册服务软件， 采⽤Raft算法保证服务的⼀致性，且⽀持健康检查。</p><ul><li><strong>Nacos</strong></li></ul><p>​ Nacos是⼀个更易于构建云原⽣应⽤的动态服务发现、配置管理和服务管理平台。简单来说 Nacos 就是 注册中⼼ + 配置中⼼的组合，帮助我们解决微服务开发必会涉及到的服务注册 与发现，服务配置，服务管理等问题。Nacos 是 Spring Cloud Alibaba 核⼼组件之⼀，负责服务注册与发现，还有配置。</p><table><thead><tr><th style="text-align:center;">组件</th><th style="text-align:center;">语言</th><th style="text-align:center;">CAP</th><th style="text-align:center;">对外暴漏接口</th></tr></thead><tbody><tr><td style="text-align:center;">Eureka</td><td style="text-align:center;">Java</td><td style="text-align:center;">AP（⾃我保护机制，保证可⽤）</td><td style="text-align:center;">HTTP</td></tr><tr><td style="text-align:center;">Consul</td><td style="text-align:center;">Go</td><td style="text-align:center;">CP</td><td style="text-align:center;">HTTP/DNS</td></tr><tr><td style="text-align:center;">Zookeeper</td><td style="text-align:center;">Java</td><td style="text-align:center;">CP</td><td style="text-align:center;">客户端</td></tr><tr><td style="text-align:center;">Nacos</td><td style="text-align:center;">Java</td><td style="text-align:center;">⽀持AP/CP切换</td><td style="text-align:center;">HTTP</td></tr></tbody></table><blockquote><p>P：分区容错性（⼀定的要满⾜的）</p><p>C：数据⼀致性</p><p>A：⾼可⽤</p><p>CAP不可能同时满⾜三个，要么是AP，要么是CP</p></blockquote><h2 id="_1-2-服务注册中心组件-eureka" tabindex="-1"><a class="header-anchor" href="#_1-2-服务注册中心组件-eureka" aria-hidden="true">#</a> 1.2 <strong>服务注册中心组件</strong> <strong>Eureka</strong></h2><p>服务注册中⼼的⼀般原理、对⽐了主流的服务注册中心方案</p><p>⽬光聚焦Eureka</p><ul><li>Eureka 基础架构</li></ul><p><img src="'+i+'" alt="1696863629159"></p><ul><li>Eureka 交互流程及原理</li></ul><blockquote><p>下图是官⽹描述的⼀个架构图</p></blockquote><p><img src="'+u+'" alt="1696863690205"></p><p><img src="'+r+`" alt="1696863722718"></p><p>Eureka 包含两个组件：Eureka Server 和 Eureka Client，Eureka Client是⼀个 Java客户端，⽤于简化与Eureka Server的交互；Eureka Server提供服务发现的能力，各个微服务启动时，会通过Eureka Client向Eureka Server 进⾏注册自己的信息（例如⽹络信息），Eureka Server会存储该服务的信息；</p><p>1）图中us-east-1c、us-east-1d，us-east-1e代表不同的区也就是不同的机房</p><p>2）图中每⼀个Eureka Server都是⼀个集群。</p><p>3）图中Application Service作为服务提供者向Eureka Server中注册服务， Eureka Server接受到注册事件会在集群和分区中进⾏数据同步，Application Client作为消费端（服务消费者）可以从Eureka Server中获取到服务注册信息，进⾏服务调⽤。</p><p>4）微服务启动后，会周期性地向Eureka Server发送⼼跳（默认周期为30秒） 以续约⾃⼰的信息</p><p>5）Eureka Server在⼀定时间内没有接收到某个微服务节点的⼼跳，Eureka Server将会注销该微服务节点（默认90秒）</p><p>6）每个Eureka Server同时也是Eureka Client，多个Eureka Server之间通过复制的⽅式完成服务注册列表的同步</p><p>7）Eureka Client会缓存Eureka Server中的信息。即使所有的Eureka Server节点都宕掉，服务消费者依然可以使⽤缓存中的信息找到服务提供者</p><p><strong>Eureka</strong>通过⼼跳检测、健康检查和客户端缓存等机制，提⾼系统的灵活性、可伸缩性和可⽤性。</p><hr><h2 id="_1-3-eureka应用及高可用集群" tabindex="-1"><a class="header-anchor" href="#_1-3-eureka应用及高可用集群" aria-hidden="true">#</a> 1.3 Eureka应⽤及高可用集群</h2><p>1）单实例Eureka Server—&gt;访问管理界⾯—&gt;Eureka Server集群</p><p>2）服务提供者（简历微服务注册到集群）</p><p>3）服务消费者（⾃动投递微服务注册到集群/从Eureka Server集群获取服务信息）</p><p>4）完成调⽤</p><hr><h3 id="_1-3-1-搭建单例-eureka-server服务注册中心" tabindex="-1"><a class="header-anchor" href="#_1-3-1-搭建单例-eureka-server服务注册中心" aria-hidden="true">#</a> 1.3.1 搭建单例 Eureka Server服务注册中⼼</h3><p>lagou-service-resume 8080-----</p><p>lagou-service-autodeliver 8090----</p><p>lagou-cloud-eureka-server 8761----</p><p>基于Maven构建SpringBoot⼯程，在SpringBoot⼯程之上搭建EurekaServer服务 （lagou-cloud-eureka-server-8761)</p><ul><li>lagou-parent中引⼊Spring Cloud 依赖</li></ul><p>Spring Cloud 是⼀个综合的项⽬，下⾯有很多⼦项⽬，⽐如eureka⼦项⽬（版本号 1.x.x）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>Greenwich.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当前⼯程pom.xml中引⼊依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
 <span class="token comment">&lt;!--Eureka server依赖--&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eurekaserver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：在⽗⼯程的pom⽂件中⼿动引⼊jaxb的jar，因为Jdk9之后默认没有加载该模块，EurekaServer 使⽤到，所以需要⼿动导⼊，否则 EurekaServer 服务⽆法启动。</p><ul><li>⽗⼯程pom.xml</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--引⼊Jaxb，开始--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jaxb-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jaxb-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.glassfish.jaxb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jaxb-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.10-b140310.1920<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--引⼊Jaxb，结束--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>application.yml</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#Eureka server服务端⼝</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
 <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">application</span><span class="token punctuation">:</span>
 <span class="token key atrule">name</span><span class="token punctuation">:</span> lagou<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>server <span class="token comment"># 应⽤名称，会在Eureka中作为服务的id标识（serviceId）</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">instance</span><span class="token punctuation">:</span>
 <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost
 <span class="token key atrule">client</span><span class="token punctuation">:</span>
 <span class="token key atrule">service-url</span><span class="token punctuation">:</span> <span class="token comment"># 客户端与EurekaServer交互的地址，如果是集群，也需要写其它Server的地址</span>
 <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/
 <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># ⾃⼰就是服务不需要注册⾃⼰</span>
 <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，置为false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SpringBoot启动类，使⽤@EnableEurekaServer声明当前项⽬为EurekaServer 服务</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">EnableEurekaServer</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token comment">// 声明本项⽬是⼀个Eureka服务</span>
<span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LagouCloudEurekaServerApplication</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">LagouCloudEurekaServerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
 	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>执⾏启动类LagouCloudEurekaServerApplication的main函数</p></li><li><p>访问http://127.0.0.1:8761，如果看到如下⻚⾯（Eureka注册中⼼后台），则表明EurekaServer发布成功</p></li></ul><p><img src="`+k+'" alt="1696864954676"></p><p><img src="'+d+'" alt="1696864974487"></p><p><img src="'+m+'" alt="1696864988808"></p><hr><h3 id="_1-3-2-搭建eureka-server-ha-高可用集群" tabindex="-1"><a class="header-anchor" href="#_1-3-2-搭建eureka-server-ha-高可用集群" aria-hidden="true">#</a> 1.3.2 搭建Eureka Server HA ⾼可⽤集群</h3><p>在互联⽹应⽤中，服务实例很少有单个的。</p><p>即使微服务消费者会缓存服务列表，但是如果EurekaServer只有⼀个实例，该实例挂掉，正好微服务消费者本地缓存列表中的服务实例也不可⽤，那么这个时候整个系统都受影响。</p><p>在⽣产环境中，我们会配置Eureka Server集群实现⾼可⽤。Eureka Server集群之中的节点通过点对点（P2P）通信的⽅式共享服务注册表。我们开启两台 Eureka Server 以搭建集群。</p><p><img src="'+v+`" alt="1696865123270"></p><p>（1）修改本机host属性</p><p>由于是在个⼈计算机中进⾏测试很难模拟多主机的情况，Eureka配置server集群时需要执⾏host地址。 所以需要修改个⼈电脑中host地址</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token class-name">LagouCloudEurekaServerA</span>
<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token class-name">LagouCloudEurekaServerB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）修改 lagou-cloud-eureka-server ⼯程中的yml配置⽂件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#指定应⽤名称</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">application</span><span class="token punctuation">:</span>
 <span class="token key atrule">name</span><span class="token punctuation">:</span> lagou<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>server
<span class="token punctuation">---</span>
<span class="token comment">#第⼀个profile,后期启动spring-boot项⽬时，可通过命令参数指定</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">profiles</span><span class="token punctuation">:</span> LagouCloudEurekaServerA
<span class="token key atrule">server</span><span class="token punctuation">:</span>
 <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">instance</span><span class="token punctuation">:</span>
 <span class="token key atrule">hostname</span><span class="token punctuation">:</span> LagouCloudEurekaServerA
 <span class="token key atrule">client</span><span class="token punctuation">:</span>
 <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>
 <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//LagouCloudEurekaServerB<span class="token punctuation">:</span>8762/eureka
<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>
<span class="token comment">#第⼆个profile,后期启动spring-boot项⽬时，可通过命令参数指定</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">profiles</span><span class="token punctuation">:</span> LagouCloudEurekaServerB
<span class="token key atrule">server</span><span class="token punctuation">:</span>
 <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8762</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">instance</span><span class="token punctuation">:</span>
 <span class="token key atrule">hostname</span><span class="token punctuation">:</span> LagouCloudEurekaServerB
 <span class="token key atrule">client</span><span class="token punctuation">:</span>
 <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>
 <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//LagouCloudEurekaServerA<span class="token punctuation">:</span>8761/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><ul><li><p>在 ⼀个实例中，把另外的实例作为了集群中的镜像节点，那么这个http://LagouCloudEurekaServerB:8762/eureka URL 中的 LagouCloudEurekaServerB 就要和其它个profile 中的 eureka.instance.hostname 保持⼀致。</p></li><li><p>register-with-eureka 和 fetch-registry 在单节点时设置为了 false, 因为只有⼀台 Eureka Server，并不需要⾃⼰注册⾃⼰，⽽现在有了集群，可以在集群的其他节点中注册本服务</p></li></ul><p>（3）启动两次该SpringBoot项⽬，分别使⽤两个不同的profiles</p><p><img src="`+g+'" alt="1696865289276"></p><p>（4）访问两个EurekaServer的管理台⻚⾯http://lagoucloudeurekaservera:8761/ 和http://lagoucloudeurekaserverb:8762/会发现注册中⼼ LAGOU-CLOUD-EUREKA-SERVER 已经有两个节点，并且 registered-replicas (相邻集群复制节点)中已经包含对⽅</p><p><img src="'+b+'" alt="1696865332139"></p><p>除了上述在同⼀个⼯程基础上启动两次外，我们也可以配置两个⼯程，如同⽼师课堂上的⼀样</p><p><img src="'+y+`" alt="1696865359325"></p><h3 id="_1-3-3-微服务提供者—-注册到eureka-server-集群" tabindex="-1"><a class="header-anchor" href="#_1-3-3-微服务提供者—-注册到eureka-server-集群" aria-hidden="true">#</a> 1.3.3 微服务提供者—&gt;注册到Eureka Server 集群</h3><p><strong>注册简历微服务</strong>（简历服务部署两个实例，分别占⽤8080、8081端⼝）</p><ul><li>⽗⼯程中引⼊spring-cloud-commons依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>pom⽂件引⼊坐标，添加eureka client的相关坐标</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eurekaclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置application.yml⽂件</li></ul><p>在application.yml 中添加Eureka Server⾼可⽤集群的地址及相关配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">client</span><span class="token punctuation">:</span>
 <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span> <span class="token comment"># eureka server的路径</span>
 <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//lagoucloudeurekaservera<span class="token punctuation">:</span>8761/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//lagoucloudeurekaserverb<span class="token punctuation">:</span>8762/eureka/ <span class="token comment">#把 eureka 集群中的所有 url 都填写了进来，也可以只写⼀台，因为各个 eureka server 可以同步注册表</span>
 <span class="token key atrule">instance</span><span class="token punctuation">:</span> <span class="token comment">#使⽤ip注册，否则会使⽤主机名注册了（此处考虑到对⽼版本的兼容，新版本经过实验都是ip）</span>
 <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token comment">#⾃定义实例显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress</span>
 <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.client.ipaddress<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span><span class="token punctuation">:</span>@project.version@
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>经验：⾃定义实例显示格式，加上版本号，便于多版本管理</strong></p><ul><li>启动类添加注解</li></ul><p><img src="`+f+'" alt="1696866033801"></p><p><strong>注意：</strong></p><p>1）从Spring Cloud Edgware版本开始，@EnableDiscoveryClient 或 @EnableEurekaClient 可省略。只需加上相关依赖，并进⾏相应配置，即可将微服务注册到服务发现组件上。</p><p>2）@EnableDiscoveryClient和@EnableEurekaClient⼆者的功能是⼀样的。但是如果选⽤的是eureka服务器，那么就推荐@EnableEurekaClient，如果是其他的注册中⼼，那么推荐使⽤@EnableDiscoveryClient，考虑到通⽤性，后期我们可以使⽤@EnableDiscoveryClient</p><ul><li>启动类执⾏，在Eureka Server后台界⾯可以看到注册的服务实例</li></ul><p><img src="'+h+'" alt="1696866058219"></p><p>说明：其他微服务注册可参照执行</p><p><img src="'+_+`" alt="1696867053481"></p><h3 id="_1-3-4-微服务消费者—-注册到eureka-server-集群" tabindex="-1"><a class="header-anchor" href="#_1-3-4-微服务消费者—-注册到eureka-server-集群" aria-hidden="true">#</a> 1.3.4 微服务消费者—&gt;注册到Eureka Server 集群</h3><p>此处⾃动注册微服务是消费者</p><ul><li>pom⽂件引⼊坐标，添加eureka client的相关坐标</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eurekaclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置application.yml⽂件</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
 <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8090</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">client</span><span class="token punctuation">:</span>
 <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span> <span class="token comment"># eureka server的路径</span>
 <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//lagoucloudeurekaservera<span class="token punctuation">:</span>8761/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//lagoucloudeurekaserverb<span class="token punctuation">:</span>8762/eureka/ <span class="token comment">#把 eureka 集群中的所有 url 都填写了进来，也可以只写⼀台，因为各个 eureka server 可以同步注册表</span>
 <span class="token key atrule">instance</span><span class="token punctuation">:</span>
 <span class="token comment">#使⽤ip注册，否则会使⽤主机名注册了（此处考虑到对⽼版本的兼容，新版本经过实验都是ip）</span>
 <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token comment">#⾃定义实例显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress</span>
 <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.client.ipaddress<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span><span class="token punctuation">:</span>@project.version@
 
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">application</span><span class="token punctuation">:</span>
 <span class="token key atrule">name</span><span class="token punctuation">:</span> lagou<span class="token punctuation">-</span>service<span class="token punctuation">-</span>autodeliver 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在启动类添加注解@EnableDiscoveryClient，开启服务发现</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">EntityScan</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment">// 开启服务发现</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutodeliverApplication</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AutodeliverApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
    
 <span class="token doc-comment comment">/**
 * 注⼊RestTemplate
 * <span class="token keyword">@return</span>
 */</span>
 <span class="token annotation punctuation">@Bean</span>
 <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-5-服务消费者调用服务提供者-通过eureka" tabindex="-1"><a class="header-anchor" href="#_1-3-5-服务消费者调用服务提供者-通过eureka" aria-hidden="true">#</a> <strong>1.3.5</strong> 服务消费者调用服务提供者（通过Eureka）</h3><p><img src="`+w+`" alt="1696867303578"></p><hr><h2 id="_1-4-eureka-细节详解" tabindex="-1"><a class="header-anchor" href="#_1-4-eureka-细节详解" aria-hidden="true">#</a> 1.4 Eureka 细节详解</h2><h3 id="_1-4-1-eureka-元数据详解" tabindex="-1"><a class="header-anchor" href="#_1-4-1-eureka-元数据详解" aria-hidden="true">#</a> 1.4.1 Eureka 元数据详解</h3><p>Eureka的元数据有两种：标准元数据和⾃定义元数据。</p><p>**标准元数据：**主机名、IP地址、端⼝号等信息，这些信息都会被发布在服务注册表中，⽤于服务之间的调⽤。</p><p>**⾃定义元数据：**可以使⽤eureka.instance.metadata-map配置，符合KEY/VALUE的存储格式。这 些元数据可以在远程客户端中访问。</p><p>类似于</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">instance</span><span class="token punctuation">:</span>
 <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token key atrule">metadata-map</span><span class="token punctuation">:</span>
 <span class="token comment"># ⾃定义元数据(kv⾃定义)</span>
 <span class="token key atrule">cluster</span><span class="token punctuation">:</span> cl1
 <span class="token key atrule">region</span><span class="token punctuation">:</span> rn1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在程序中可以使⽤DiscoveryClient 获取指定微服务的所有元数据信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span></span><span class="token class-name">AutodeliverApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ServiceInstance</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">DiscoveryClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringJUnit4ClassRunner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AutodeliverApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutodeliverApplicationTest</span> <span class="token punctuation">{</span>
 <span class="token annotation punctuation">@Autowired</span>
 <span class="token keyword">private</span> <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>
    
 <span class="token annotation punctuation">@Test</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 从EurekaServer获取指定微服务实例</span>
 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> serviceInstanceList <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">&quot;lagou-service-resume&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 循环打印每个微服务实例的元数据信息</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> serviceInstanceList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token class-name">ServiceInstance</span> serviceInstance <span class="token operator">=</span> serviceInstanceList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
 	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>serviceInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
 		<span class="token punctuation">}</span>
 	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>元数据查看如下:</p><p><img src="`+S+'" alt="1696945761609"></p><p><img src="'+E+`" alt="1696945783411"></p><h3 id="_1-4-2-eureka-客户端详解" tabindex="-1"><a class="header-anchor" href="#_1-4-2-eureka-客户端详解" aria-hidden="true">#</a> 1.4.2 Eureka 客户端详解</h3><p>服务提供者（也是Eureka客户端）要向EurekaServer注册服务，并完成服务续约等⼯作</p><p><strong>服务注册详解（服务提供者）</strong></p><p>1）当我们导⼊了eureka-client依赖坐标，配置Eureka服务注册中⼼地址</p><p>2）服务在启动时会向注册中⼼发起注册请求，携带服务元数据信息</p><p>3）Eureka注册中⼼会把服务的信息保存在Map中。</p><p><strong>服务续约详解（服务提供者）</strong></p><p>服务每隔30秒会向注册中⼼续约(⼼跳)⼀次（也称为报活），如果没有续约，租约在90秒后到期，然后服务会被失效。每隔30秒的续约操作我们称之为⼼跳检测</p><p>往往不需要我们调整这两个配置:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#向Eureka服务中⼼集群注册服务</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">instance</span><span class="token punctuation">:</span>
   <span class="token comment"># 租约续约间隔时间，默认30秒</span>
   <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">30</span>
 	<span class="token comment"># 租约到期，服务时效时间，默认值90秒,服务超过90秒没有发⽣⼼跳，EurekaServer会将服务从列表移除</span>
   <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">90</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取服务列表详解（服务消费者）</strong></p><p>每隔30秒服务会从注册中⼼中拉取⼀份服务列表，这个时间可以通过配置修改。往</p><p>往不需要我们调整</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#向Eureka服务中⼼集群注册服务</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">client</span><span class="token punctuation">:</span>
  <span class="token comment"># 每隔多久拉取⼀次服务列表</span>
  <span class="token key atrule">registry-fetch-interval-seconds</span><span class="token punctuation">:</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1）服务消费者启动时，从 EurekaServer服务列表获取只读备份，缓存到本地</p><p>2）每隔30秒，会重新获取并更新数据</p><p>3）每隔30秒的时间可以通过配置eureka.client.registry-fetch-interval-seconds修</p><p>改</p><h3 id="_1-4-3-eureka-服务端详解" tabindex="-1"><a class="header-anchor" href="#_1-4-3-eureka-服务端详解" aria-hidden="true">#</a> 1.4.3 Eureka 服务端详解</h3><p><strong>服务下线</strong></p><p>1）当服务正常关闭操作时，会发送服务下线的REST请求给EurekaServer。</p><p>2）服务中⼼接受到请求后，将该服务置为下线状态</p><p><strong>失效剔除</strong></p><p>Eureka Server会定时（间隔值是eureka.server.eviction-interval-timer-in-ms，默认60s）进⾏检查，如果发现实例在在⼀定时间（此值由客户端设置的eureka.instance.lease-expiration-duration-in-seconds定义，默认值为90s）内没有收到⼼跳，则会注销此实例。</p><p><strong>自我保护</strong></p><p>服务提供者 —&gt; 注册中⼼</p><p>定期的续约（服务提供者和注册中⼼通信），假如服务提供者和注册中⼼之间的网络有点问题，不代表服务提供者不可用，不代表服务消费者⽆法访问服务提供者如果在15分钟内超过85%的客户端节点都没有正常的⼼跳，那么Eureka就认为客户端与注册中⼼出现了⽹络故障，Eureka Server⾃动进⼊⾃我保护机制。</p><ul><li>为什么会有自我保护机制？</li></ul><p>默认情况下，如果Eureka Server在⼀定时间内（默认90秒）没有接收到某个微服务实例的⼼跳，Eureka Server将会移除该实例。但是当⽹络分区故障发⽣时，微服务与Eureka Server之间⽆法正常通信，⽽微服务本身是正常运⾏的，此时不应该移除这个微服务，所以引⼊了⾃我保护机制。</p><p>服务中心页面会显示如下提示信息</p><p><img src="`+x+`" alt="1696946325739"></p><p>当处于⾃我保护模式时</p><p>1）不会剔除任何服务实例（可能是服务提供者和EurekaServer之间⽹络问题），保证了⼤多数服务依然可⽤</p><p>2）Eureka Server仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上，保证当前节点依然可⽤，当⽹络稳定时，当前Eureka Server新的注册信息会被同步到其它节点中。</p><p>3）在Eureka Server⼯程中通过eureka.server.enable-self-preservation配置可用关停⾃我保护，默认值是打开</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 关闭⾃我保护模式（缺省为打开）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-5-eureka-核心源码剖析" tabindex="-1"><a class="header-anchor" href="#_1-5-eureka-核心源码剖析" aria-hidden="true">#</a> 1.5 Eureka 核心源码剖析</h2><h3 id="_1-5-1-eureka-server-启动过程" tabindex="-1"><a class="header-anchor" href="#_1-5-1-eureka-server-启动过程" aria-hidden="true">#</a> 1.5.1 Eureka Server 启动过程</h3><p>⼊⼝：SpringCloud充分利⽤了SpringBoot的⾃动装配的特点观察eureka-server的jar包，发现在META-INF下⾯有配置⽂件spring.factories</p><p><img src="`+I+'" alt="1696946450859"></p><p>springboot应⽤启动时会加载EurekaServerAutoConfiguration⾃动配置类</p><ul><li>EurekaServerAutoConfiguration类</li></ul><p>⾸先观察类头分析</p><p><img src="'+C+'" alt="1696946471395"></p><p><strong>图中的1</strong> ）需要有⼀个marker bean，才能装配Eureka Server，那么这个marker 其实是 @EnableEurekaServer注解决定的</p><p><img src="'+A+'" alt="1696946564159"></p><p><img src="'+z+'" alt="1696946578527"></p><p>也就是说只有添加了@EnableEurekaServer注解，才会有后续的动作，这是成为⼀</p><p>个EurekaServer的前提</p><p><strong>图中的2</strong>）关注EurekaServerAutoConfiguration</p><p><img src="'+R+'" alt="1696946624129"></p><p><img src="'+L+'" alt="1696946638177"></p><p>⽽在 com.netflix.eureka.cluster.PeerEurekaNodes#start⽅法中</p><p><img src="'+T+'" alt="1696946661836"></p><p>回到主配置类中</p><p><img src="'+N+'" alt="1696946679142"></p><p><img src="'+P+'" alt="1696946696253"></p><p>回到主配置类中</p><p><img src="'+M+'" alt="1696946723066"></p><p>**图中3）**关注EurekaServerInitializerConfiguration</p><p><img src="'+j+'" alt="1696946762392"></p><p>重点关注，进⼊</p><p>org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap#conte xtInitialized</p><p><img src="'+q+'" alt="1696946789656"></p><p>重点关注initEurekaServerContext()</p><p><img src="'+D+'" alt="1696946811497"></p><p>研究⼀下上图中的syncUp⽅法</p><p><img src="'+B+'" alt="1696946833986"></p><p>继续研究com.netflix.eureka.registry.AbstractInstanceRegistry#register（提供实例注册功能）</p><p><img src="'+U+'" alt="1696946856878"></p><p>继续研究</p><p>com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl#openForTraffic</p><p><img src="'+O+'" alt="1696946882168"></p><p>进⼊postInit()⽅法查看</p><p><img src="'+F+'" alt="1696946903489"></p><h3 id="_1-5-2-eureka-server-服务接口暴露策略" tabindex="-1"><a class="header-anchor" href="#_1-5-2-eureka-server-服务接口暴露策略" aria-hidden="true">#</a> 1.5.2 Eureka Server 服务接⼝暴露策略</h3><p>在Eureka Server启动过程中主配置类注册了Jersey框架（是⼀个发布restful⻛格接⼝的框架，类似于我们的springmvc）</p><p><img src="'+H+'" alt="1696946955464"></p><p>注⼊的Jersey细节</p><p><img src="'+J+'" alt="1696946975102"></p><p>扫描classpath下的那些packages呢？已经定义好了</p><p><img src="'+Z+'" alt="1696947004207"></p><p>这些就是使⽤Jersey发布的供Eureka Client调⽤的Restful⻛格服务接⼝（完成服务注册、⼼跳续约等接⼝）</p><h3 id="_1-5-3-eureka-server-服务注册接口-接受客户端注册服务" tabindex="-1"><a class="header-anchor" href="#_1-5-3-eureka-server-服务注册接口-接受客户端注册服务" aria-hidden="true">#</a> 1.5.3 Eureka Server 服务注册接⼝（接受客户端注册服务）</h3><p>ApplicationResource类的addInstance()⽅法中代码：registry.register(info, &quot;true&quot;.equals(isReplication));</p><p><img src="'+V+'" alt="1696947048397"></p><p>com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl#register - 注册服务信息并同步到其它Eureka节点</p><p><img src="'+$+`" alt="1696947070968"></p><p>AbstractInstanceRegistry#register()：注册，实例信息存储到注册表是⼀个 ConcurrentHashMap</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Registers a new instance with a given duration.
     *
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>lease<span class="token punctuation">.</span></span><span class="token class-name">LeaseManager</span><span class="token punctuation">#</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Object</span><span class="token punctuation">,</span>
     * <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span></span>
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">InstanceInfo</span> registrant<span class="token punctuation">,</span> <span class="token keyword">int</span> leaseDuration<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isReplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            read<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读锁</span>
            <span class="token comment">// registry是保存所有应⽤实例信息的Map：ConcurrentHashMap&lt;String, Map&lt;String, Lease&lt;InstanceInfo&gt;&gt;&gt;</span>
            <span class="token comment">// 从registry中获取当前appName的所有实例信息</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Lease</span><span class="token punctuation">&lt;</span><span class="token class-name">InstanceInfo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> gMap <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">REGISTER</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>isReplication<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册统计+1</span>

            <span class="token comment">// 如果当前appName实例信息为空，新建Map</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>gMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Lease</span><span class="token punctuation">&lt;</span><span class="token class-name">InstanceInfo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> gNewMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Lease</span><span class="token punctuation">&lt;</span><span class="token class-name">InstanceInfo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                gMap <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gNewMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>gMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    gMap <span class="token operator">=</span> gNewMap<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 获取实例的Lease租约信息</span>
            <span class="token class-name">Lease</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InstanceInfo</span><span class="token punctuation">&gt;</span></span> existingLease <span class="token operator">=</span> gMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Retain the last dirty timestamp without overwriting it,if there is already a lease</span>
            <span class="token comment">// 如果已经有租约，则保留最后⼀个脏时间戳⽽不覆盖它</span>
            <span class="token comment">// （⽐较当前请求实例租约 和 已有租约 的LastDirtyTimestamp，选择靠后的）</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>existingLease <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>existingLease<span class="token punctuation">.</span><span class="token function">getHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Long</span> existingLastDirtyTimestamp <span class="token operator">=</span> existingLease<span class="token punctuation">.</span><span class="token function">getHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLastDirtyTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Long</span> registrationLastDirtyTimestamp <span class="token operator">=</span> registrant<span class="token punctuation">.</span><span class="token function">getLastDirtyTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Existing lease found (existing={},provided={}&quot;</span><span class="token punctuation">,</span> existingLastDirtyTimestamp<span class="token punctuation">,</span> registrationLastDirtyTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>existingLastDirtyTimestamp <span class="token operator">&gt;</span> registrationLastDirtyTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;There is an existing lease and the existing lease&#39;s dirty timestamp {} is greater&quot;</span> <span class="token operator">+</span> <span class="token string">&quot; than the one that is being registered { } &quot;</span><span class="token punctuation">,</span> existingLastDirtyTimestamp<span class="token punctuation">,</span> registrationLastDirtyTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Using the existing instanceInfoinstead of the new instanceInfo as the registrant&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    registrant <span class="token operator">=</span> existingLease<span class="token punctuation">.</span><span class="token function">getHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// The lease does not exist and hence it is a new registration</span>
                <span class="token comment">// 如果之前不存在实例的租约，说明是新实例注册</span>
                <span class="token comment">// expectedNumberOfRenewsPerMin期待的每分钟续约数+2（因为 30s⼀个）</span>
                <span class="token comment">// 并更新numberOfRenewsPerMinThreshold每分钟续约阀值（85%）</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expectedNumberOfRenewsPerMin <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// Since the client wants to cancel it, reduce the threshold</span>
                        <span class="token comment">// (1 for 30 seconds, 2 for a minute)</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>expectedNumberOfRenewsPerMin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expectedNumberOfRenewsPerMin <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>numberOfRenewsPerMinThreshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expectedNumberOfRenewsPerMin <span class="token operator">*</span> serverConfig<span class="token punctuation">.</span><span class="token function">getRenewalPercentThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;No previous lease information found; it is new registration &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">Lease</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InstanceInfo</span><span class="token punctuation">&gt;</span></span> lease <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lease</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InstanceInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>registrant<span class="token punctuation">,</span> leaseDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>existingLease <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                lease<span class="token punctuation">.</span><span class="token function">setServiceUpTimestamp</span><span class="token punctuation">(</span>existingLease<span class="token punctuation">.</span><span class="token function">getServiceUpTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            gMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lease<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前实例信息放到维护注册信息的Map</span>

            <span class="token comment">// 同步维护最近注册队列</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>recentRegisteredQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                recentRegisteredQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// This is where the initial state transfer of overridden status happens</span>
            <span class="token comment">// 如果当前实例已经维护了OverriddenStatus，将其也放到此Eureka Server的overriddenInstanceStatusMap中</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">InstanceStatus</span><span class="token punctuation">.</span><span class="token constant">UNKNOWN</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getOverriddenStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Found overridden status {} for instance {}.Checking to see if needs to be add to the &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;overrides&quot;</span><span class="token punctuation">,</span>
                 registrant<span class="token punctuation">.</span><span class="token function">getOverriddenStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>overriddenInstanceStatusMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Not found overridden id {} and hence adding it&quot;</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    overriddenInstanceStatusMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getOverriddenStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">InstanceStatus</span> overriddenStatusFromMap <span class="token operator">=</span> overriddenInstanceStatusMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>overriddenStatusFromMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Storing overridden status {} from map&quot;</span><span class="token punctuation">,</span> overriddenStatusFromMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                registrant<span class="token punctuation">.</span><span class="token function">setOverriddenStatus</span><span class="token punctuation">(</span>overriddenStatusFromMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// Set the status based on the overridden status rules</span>
            <span class="token comment">// 根据overridden status规则，设置状态</span>
            <span class="token class-name">InstanceStatus</span> overriddenInstanceStatus <span class="token operator">=</span> <span class="token function">getOverriddenInstanceStatus</span><span class="token punctuation">(</span>registrant<span class="token punctuation">,</span> existingLease<span class="token punctuation">,</span> isReplication<span class="token punctuation">)</span><span class="token punctuation">;</span>
            registrant<span class="token punctuation">.</span><span class="token function">setStatusWithoutDirty</span><span class="token punctuation">(</span>overriddenInstanceStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// If the lease is registered with UP status, set lease service up timestamp</span>
            <span class="token comment">// 如果租约以UP状态注册，设置租赁服务时间戳</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">InstanceStatus</span><span class="token punctuation">.</span><span class="token constant">UP</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                lease<span class="token punctuation">.</span><span class="token function">serviceUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            registrant<span class="token punctuation">.</span><span class="token function">setActionType</span><span class="token punctuation">(</span><span class="token class-name">ActionType</span><span class="token punctuation">.</span><span class="token constant">ADDED</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ActionType为 ADD</span>
            recentlyChangedQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecentlyChangedItem</span><span class="token punctuation">(</span>lease<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//维护recentlyChangedQueue</span>
            registrant<span class="token punctuation">.</span><span class="token function">setLastUpdatedTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新最后更新时间</span>

            <span class="token comment">// 使当前应⽤的ResponseCache失效</span>
            <span class="token function">invalidateCache</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getVIPAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getSecureVipAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Registered instance {}/{} with status {}(replication={})&quot;</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isReplication<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            read<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读锁</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PeerAwareInstanceRegistryImpl#replicateToPeers() ：复制到Eureka对等节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replicateToPeers</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">,</span> <span class="token class-name">String</span> appName<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">InstanceInfo</span> info <span class="token comment">/*optional*/</span><span class="token punctuation">,</span> <span class="token class-name">InstanceStatus</span> newStatus <span class="token comment">/*optional*/</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span> isReplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Stopwatch</span> tracer <span class="token operator">=</span> action<span class="token punctuation">.</span><span class="token function">getTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是复制操作（针对当前节点，false）</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isReplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                numberOfReplicationsLastMin<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 如果它已经是复制，请不要再次复制，直接return</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>peerEurekaNodes <span class="token operator">==</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token constant">EMPTY_LIST</span> <span class="token operator">||</span> isReplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 遍历集群所有节点（除当前节点外）</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">PeerEurekaNode</span> node <span class="token operator">:</span> peerEurekaNodes<span class="token punctuation">.</span><span class="token function">getPeerEurekaNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// If the url represents this host, do not replicate to yourself.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>peerEurekaNodes<span class="token punctuation">.</span><span class="token function">isThisMyUrl</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getServiceUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 复制Instance实例操作到某个node节点</span>
                <span class="token function">replicateInstanceActionsToPeers</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> info<span class="token punctuation">,</span> newStatus<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            tracer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PeerAwareInstanceRegistryImpl#replicateInstanceActionsToPeers</p><p><img src="`+G+'" alt="1696949731664"></p><h3 id="_1-5-4-eureka-server-服务续约接口-接受客户端续约" tabindex="-1"><a class="header-anchor" href="#_1-5-4-eureka-server-服务续约接口-接受客户端续约" aria-hidden="true">#</a> 1.5.4 Eureka Server 服务续约接口（接受客户端续约）</h3><p>InstanceResource的renewLease⽅法中完成客户端的⼼跳（续约）处理，关键代码：registry.renew(app.getName(), id, isFromReplicaNode);</p><p><img src="'+W+'" alt="1696949780612"></p><p><img src="'+K+'" alt="1696949794394"></p><p>com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl#renew</p><p><img src="'+Q+`" alt="1696949817205"></p><p>replicateInstanceActionsToPeers() 复制Instance实例操作到其它节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replicateInstanceActionsToPeers</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">,</span> <span class="token class-name">String</span> appName<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">InstanceInfo</span> info<span class="token punctuation">,</span> <span class="token class-name">InstanceStatus</span> newStatus<span class="token punctuation">,</span> <span class="token class-name">PeerEurekaNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">InstanceInfo</span> infoFromRegistry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">CurrentRequestVersion</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Version</span><span class="token punctuation">.</span><span class="token constant">V2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token class-name">Cancel</span><span class="token operator">:</span> <span class="token comment">//取消</span>
                    node<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token class-name">Heartbeat</span><span class="token operator">:</span> <span class="token comment">//⼼跳</span>
                    <span class="token class-name">InstanceStatus</span> overriddenStatus <span class="token operator">=</span> overriddenInstanceStatusMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    infoFromRegistry <span class="token operator">=</span> <span class="token function">getInstanceByAppAndId</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    node<span class="token punctuation">.</span><span class="token function">heartbeat</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> infoFromRegistry<span class="token punctuation">,</span> overriddenStatus<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token class-name">Register</span><span class="token operator">:</span> <span class="token comment">//注册</span>
                    node<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token class-name">StatusUpdate</span><span class="token operator">:</span> <span class="token comment">//状态更新</span>
                    infoFromRegistry <span class="token operator">=</span> <span class="token function">getInstanceByAppAndId</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    node<span class="token punctuation">.</span><span class="token function">statusUpdate</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> newStatus<span class="token punctuation">,</span> infoFromRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token class-name">DeleteStatusOverride</span><span class="token operator">:</span> <span class="token comment">//删除OverrideStatus</span>
                    infoFromRegistry <span class="token operator">=</span> <span class="token function">getInstanceByAppAndId</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    node<span class="token punctuation">.</span><span class="token function">deleteStatusOverride</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> infoFromRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot replicate information to {} for action {}&quot;</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">getServiceUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>renew()⽅法中—&gt;leaseToRenew.renew()—&gt;对最后更新时间戳进⾏更新</p><h3 id="_1-5-5-eureka-client-注册服务" tabindex="-1"><a class="header-anchor" href="#_1-5-5-eureka-client-注册服务" aria-hidden="true">#</a> 1.5.5 Eureka Client 注册服务</h3><p>启动过程：Eureka客户端在启动时也会装载很多配置类，我们通过spring-cloud-netflix-eureka-client-2.1.0.RELEASE.jar下的spring.factories⽂件可以看到加载的配置类</p><p><img src="`+Y+'" alt="1696950047486"></p><p>引⼊jar就会被⾃动装配，分析EurekaClientAutoConfiguration类头</p><p><img src="'+X+'" alt="1696950068331"></p><p>如果不想作为客户端，可以设置eureka.client.enabled=false</p><p><img src="'+nn+'" alt="1696950086272"></p><p>回到主配置类EurekaClientAutoConfiguration</p><p>思考：EurekaClient启动过程要做什么事情？？？？？？</p><p>1）读取配置⽂件</p><p>2）启动时从EurekaServer获取服务实例信息</p><p>3）注册⾃⼰到EurekaServer（addInstance）</p><p>4）开启⼀些定时任务（⼼跳续约，刷新本地服务缓存列表）</p><p><strong>1.读取配置⽂件</strong></p><p><img src="'+sn+'" alt="1696950121556"></p><p><strong>2.启动时从Eureka Server 获取服务实例信息</strong></p><p><img src="'+an+'" alt="1696950175087"></p><p>观察⽗类DiscoveryClient()</p><p><img src="'+tn+'" alt="1696950202313"></p><p>在另外⼀个构造器中</p><p><img src="'+pn+'" alt="1696950225976"></p><p><img src="'+en+'" alt="1696950245313"></p><p><strong>3.注册⾃⼰到EurekaServer</strong></p><p><img src="'+on+'" alt="1696950270577"></p><p>DiscoveryClient#register</p><p><img src="'+cn+'" alt="1696950290440"></p><p><strong>4.开启⼀些定时任务（⼼跳续约，刷新本地服务缓存列表）</strong></p><p><img src="'+ln+'" alt="1696950310984">刷新本地缓存</p><p><img src="'+un+'" alt="1696950336739"></p><p><img src="'+rn+'" alt="1696950356114"></p><p>⼼跳续约定时任务</p><p><img src="'+kn+'" alt="1696950388744"></p><p><img src="'+dn+'" alt="1696950400614"></p><p><img src="'+mn+'" alt="1696950414750"></p><p><img src="'+vn+'" alt="1696950425641"></p><ul><li>读取配置⽂件</li></ul><p><img src="'+gn+'" alt="1696950447541"></p><p>获取配置信息之外就开始获取⼀个Eureka客户端了</p><p><img src="'+bn+'" alt="1696950466761"></p><p>来到⽗类，super</p><p><img src="'+yn+'" alt="1696950488214"></p><p><img src="'+fn+'" alt="1696950508890"></p><p><img src="'+hn+'" alt="1696950528601"></p><ul><li>初始化⼀些定时器（定时获取注册信息、发送⼼跳等）</li></ul><p><img src="'+_n+'" alt="1696950552459"></p><p>刷新本地缓存定时任务</p><p><img src="'+wn+'" alt="1696950571554"></p><p><img src="'+Sn+'" alt="1696950591349"></p><p>⼼跳</p><p><img src="'+En+'" alt="1696950628719"></p><ul><li>注册⾃⼰</li></ul><p><img src="'+xn+'" alt="1696950650415"></p><p>服务下架，服务死掉的时候就会调⽤shutdown，就是shutdown</p><p><img src="'+In+'" alt="1696950689530"></p><p>客户端注册服务，在</p><p>com.netflix.discovery.DiscoveryClient类的构造函数中调⽤了 this.initScheduledTasks()⽅法，这个⽅法会启动定时任务调⽤EurekaServer的相关 Restful接⼝，那么这个DiscoveryClient构造函数是什么时候调⽤呢？右键—&gt;Find Usages就能知道</p><p>因此，我们看com.netflix.discovery.DiscoveryClient#register</p><h3 id="_1-5-6-eureka-client-下架服务" tabindex="-1"><a class="header-anchor" href="#_1-5-6-eureka-client-下架服务" aria-hidden="true">#</a> <strong>1.5.6 Eureka Client 下架服务</strong></h3><p><img src="'+Cn+'" alt="1696950745088"></p><p><img src="'+An+'" alt="1696950759772"></p><p><img src="'+zn+'" alt="1696950774750"></p>',306);function Tn(Nn,Pn){const n=a("Valine");return t(),p("div",null,[e(n),Ln])}const jn=s(Rn,[["render",Tn],["__file","41.html.vue"]]);export{jn as default};
