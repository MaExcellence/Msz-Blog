import{_ as n,o as s,c as a,a as e}from"./app-ad70bc3c.js";const t="/msz-blog/assets/1697117296326-b0669137.png",p="/msz-blog/assets/1697117449109-b9cb1922.png",o="/msz-blog/assets/1697117496768-4a61b924.png",c="/msz-blog/assets/1697117545556-2caa1f00.png",l="/msz-blog/assets/1697117641702-b146f14a.png",i="/msz-blog/assets/1697118346565-1523c062.png",r="/msz-blog/assets/1697122015702-d57ee062.png",u="/msz-blog/assets/1697122128908-3743102a.png",k="/msz-blog/assets/1697122238473-4115efdb.png",d="/msz-blog/assets/1697122357768-86adc1fd.png",m="/msz-blog/assets/1697122375417-be7c2950.png",v="/msz-blog/assets/1697122424514-df704bb2.png",b="/msz-blog/assets/1697122448982-ba5ee8a7.png",g="/msz-blog/assets/1697122502680-81896b08.png",y="/msz-blog/assets/1697122526470-4eaea939.png",_="/msz-blog/assets/1697122554909-d1e041e6.png",w="/msz-blog/assets/1697122583228-e7c4d201.png",h="/msz-blog/assets/1697122613996-4523ea51.png",R="/msz-blog/assets/1697122628323-546dde11.png",f="/msz-blog/assets/1697122643323-f2e9a1ed.png",x="/msz-blog/assets/1697122660227-036ef140.png",L="/msz-blog/assets/1697122676840-ae3a3953.png",S="/msz-blog/assets/1697122690191-a2b9ed44.png",z="/msz-blog/assets/1697122704597-0a8a2fb7.png",B="/msz-blog/assets/1697122720290-0bb9936b.png",C="/msz-blog/assets/1697122736765-1a83a6cb.png",I="/msz-blog/assets/1697122757675-cbb3a63b.png",A="/msz-blog/assets/1697122768440-7bcbaf31.png",T="/msz-blog/assets/1697122811815-19132075.png",j="/msz-blog/assets/1697122827347-5956dadb.png",E="/msz-blog/assets/1697122856308-3c51c606.png",q="/msz-blog/assets/1697122893332-ffb831ec.png",N="/msz-blog/assets/1697122912062-269136c6.png",F="/msz-blog/assets/1697122931381-98eb07bd.png",O="/msz-blog/assets/1697122958324-30862d82.png",P="/msz-blog/assets/1697123304973-4cc988e0.png",U="/msz-blog/assets/1697123316850-c3a7191e.png",V={},Z=e('<h2 id="_2-1-关于负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-1-关于负载均衡" aria-hidden="true">#</a> <strong>2.1</strong> <strong>关于负载均衡</strong></h2><p>负载均衡⼀般分为<strong>服务器端负载均衡</strong>和<strong>客户端负载均衡</strong></p><p>所谓<strong>服务器端负载均衡</strong>，⽐如Nginx、F5这些，请求到达服务器之后由这些负载均衡器根据⼀定的算法将请求路由到⽬标服务器处理。</p><p>所谓<strong>客户端负载均衡</strong>，⽐如我们要说的Ribbon，服务消费者客户端会有⼀个服务器地址列表，调⽤⽅在请求前通过⼀定的负载均衡算法选择⼀个服务器进⾏访问，负载均衡算法的执⾏是在请求客户端进⾏。</p><p>Ribbon是Netflix发布的负载均衡器。Eureka⼀般配合Ribbon进⾏使⽤，Ribbon利⽤从Eureka中读取到服务信息，在调⽤服务提供者提供的服务时，会根据⼀定的算法进⾏负载。</p><p><img src="'+t+'" alt="1697117296326"></p><hr><h2 id="_2-2-ribbon高级应用" tabindex="-1"><a class="header-anchor" href="#_2-2-ribbon高级应用" aria-hidden="true">#</a> 2.2 Ribbon高级应用</h2><p>不需要引⼊额外的Jar坐标，因为在服务消费者中我们引⼊过eureka-client，它会引⼊Ribbon相关Jar</p><p><img src="'+p+`" alt="1697117449109"></p><p>代码中使⽤如下，在RestTemplate上添加对应注解即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token comment">// Ribbon负载均衡</span>
<span class="token annotation punctuation">@LoadBalanced</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改服务提供者api返回值，返回当前实例的端⼝号，便于观察负载情况</p><p><img src="`+o+'" alt="1697117496768"></p><p>测试</p><p><img src="'+c+'" alt="1697117527599"></p><hr><h2 id="_2-3-ribbon-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_2-3-ribbon-负载均衡策略" aria-hidden="true">#</a> 2.3 Ribbon 负载均衡策略</h2><p>Ribbon内置了多种负载均衡策略，内部负责复杂均衡的顶级接口为 com.netflix.loadbalancer.IRule ，类树如下</p><p><img src="'+l+`" alt="1697117641702"></p><table><thead><tr><th style="text-align:center;">负载均衡策略</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">RoundRobinRule：轮询策略</td><td style="text-align:center;">默认超过10次获取到的server都不可⽤，会返回⼀个空的server</td></tr><tr><td style="text-align:center;">RandomRule：随机策略</td><td style="text-align:center;">如果随机到的server为null或者不可⽤的话，会while不停的循环选取</td></tr><tr><td style="text-align:center;">RetryRule：重试策略</td><td style="text-align:center;">⼀定时限内循环重试。默认继承⼀定时限内循环重试。默认继承RetryRule会在每次选取之后，对选举的server进⾏判断，是否为null，是否alive，并且在500ms内会不停的选取判断。⽽RoundRobinRule失效的策略是超过10次，RandomRule是没有失效时间的概念，只要serverList没都挂。</td></tr><tr><td style="text-align:center;">BestAvailableRule：最小连接数策略</td><td style="text-align:center;">遍历serverList，选取出可⽤的且连接数最⼩的⼀个server。该算法⾥⾯有⼀个LoadBalancerStats的成员变量，会存储所有server的运⾏状况和连接数。如果选取到的server为null，那么会调⽤RoundRobinRule重新选取。1（1） 2（1）3（1）</td></tr><tr><td style="text-align:center;">AvailabilityFilteringRule：可⽤过滤策略</td><td style="text-align:center;">扩展了轮询策略，会先通过默认的轮询选取⼀个server，再去判断该server是否超时可⽤，当前连接数是否超限，都成功再返回。</td></tr><tr><td style="text-align:center;">ZoneAvoidanceRule：区域权衡策略（默认策略）</td><td style="text-align:center;">扩展了轮询策略，继承了2个过滤器：ZoneAvoidancePredicate和AvailabilityPredicate，除了过滤超时和链接数过多的server，还会过滤掉不符合要求的zone区域⾥⾯的所有节点，AWS --ZONE 在⼀个区域/机房内的服务实例中轮询</td></tr></tbody></table><p>修改负载均衡策略</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#针对的被调⽤⽅微服务名称,不加就是全局⽣效</span>
<span class="token key atrule">lagou-service-resume</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
   <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule <span class="token comment">#负载策略调整</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-4-ribbon-核心源码剖析" tabindex="-1"><a class="header-anchor" href="#_2-4-ribbon-核心源码剖析" aria-hidden="true">#</a> 2.4 Ribbon 核心源码剖析</h2><p><strong>Ribbon⼯作原理</strong></p><p><img src="`+i+'" alt="1697118346565"></p><p><img src="'+r+'" alt="1697122015702"></p><p><strong>重点</strong>：Ribbon给 restTemplate 添加了⼀个拦截器</p><p>思考：Ribbon在做什么：</p><p>当我们访问http://lagou-service-resume/resume/openstate/的时候，ribbon应该根据服务名lagou-service-resume获取到该服务的实例列表并按照⼀定的负载均衡策略从实例列表中获取⼀个实例Server，并最终通过RestTemplate进⾏请求访问</p><p><strong>Ribbon</strong>细节结构图（涉及到底层的⼀些组件/类的描述）</p><p>1)获取服务实例列表 2）从列表中选择⼀个server</p><p><img src="'+u+'" alt="1697122128908"></p><p>图中核⼼是 <strong>负载均衡管理器</strong> LoadBalancer（总的协调者，相当于⼤脑，为了做事情，协调四肢），围绕它周围的多有IRule、IPing等 。</p><p>IRule：是在选择实例的时候的负载均衡策略对象</p><p>IPing：是⽤来向服务发起⼼跳检测的，通过⼼跳检测来判断该服务是否可⽤</p><p>ServerListFilter：根据⼀些规则过滤传⼊的服务实例列表</p><p>ServerListUpdater：定义了⼀系列的对服务列表的更新操作</p><hr><h3 id="_2-4-1-loadbalanced-源码剖析" tabindex="-1"><a class="header-anchor" href="#_2-4-1-loadbalanced-源码剖析" aria-hidden="true">#</a> 2.4.1 @LoadBalanced 源码剖析</h3><p>我们在RestTemplate实例上添加了⼀个@LoadBalanced注解，就可以实现负载均衡，很神奇，我们接下来分析这个注解背后的操作（负载均衡过程）</p><p>查看@LoadBalanced注解，那这个注解是在哪⾥被识别到的呢？</p><p><img src="'+k+`" alt="1697122238473"></p><ul><li>LoadBalancerClient类（实现类RibbonLoadBalancerClient，<strong>待用</strong>）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancerClient</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceInstanceChooser</span><span class="token punctuation">{</span>
 <span class="token comment">// 根据服务执⾏请求内容</span>
 <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">,</span> <span class="token class-name">LoadBalancerRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
 <span class="token comment">// 根据服务执⾏请求内容</span>
 <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">,</span> <span class="token class-name">ServiceInstance</span> serviceInstance<span class="token punctuation">,</span><span class="token class-name">LoadBalancerRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
 <span class="token comment">// 拼接请求⽅式 传统中是ip:port 现在是服务名称:port 形式</span>
 <span class="token class-name">URI</span> <span class="token function">reconstructURI</span><span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span> instance<span class="token punctuation">,</span> <span class="token class-name">URI</span> original<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>⽼规矩：SpringCloud 充分利⽤了 SpringBoot 的⾃动装配特点，找 spring.factories 配置⽂件</li></ul><p><img src="`+d+'" alt="1697122357768"></p><p><img src="'+m+'" alt="1697122375417"></p><p><strong>1</strong>）研究 <strong>LoadBalancerAutoConfiguration</strong></p><p><img src="'+v+'" alt="1697122424514"></p><p>=========》》》LoadBalancerAutoConfiguration⾥⾯的内容剖析</p><p>第⼀处：注⼊resttemplate对象到集合待用</p><p><img src="'+b+'" alt="1697122448982"></p><p>第⼆处：注⼊resttemplate定制器</p><p><img src="'+g+'" alt="1697122502680"></p><p>第三处：使⽤定制器给集合中的每⼀个resttemplate对象添加⼀个拦截器</p><p><img src="'+y+'" alt="1697122526470"></p><p>到这⾥，我们明⽩，添加了注解的RestTemplate对象会被添加⼀个拦截器 LoadBalancerInterceptor，该拦截器就是后续拦截请求进⾏负载处理的。</p><p>所以，下⼀步重点我们该分析拦截器LoadBalancerInterceptor------&gt;&gt;&gt;intercept() ⽅法</p><p>==========》》》》分析LoadBalancerInterceptor.intercept()⽅法</p><p><img src="'+_+'" alt="1697122554909"></p><p>那么？RibbonLoadBalancerClient对象是在哪⾥注⼊的===》》回到最初的⾃动配置类RibbonAutoConfiguration中。</p><p><img src="'+w+'" alt="1697122583228"></p><p>负载均衡的事情执⾏原来交给了我们最初看到的RibbonLoadBalancerClient 对象非常核⼼的⼀个⽅法：RibbonLoadBalancerClient.execute()</p><p><img src="'+h+'" alt="1697122613996"></p><p><img src="'+R+'" alt="1697122628323"></p><p>=====》》》回到主配置类RibbonAutoConfiguration</p><p><img src="'+f+'" alt="1697122643323"></p><p><img src="'+x+'" alt="1697122660227"></p><p>RibbonClientConfiguration中装配了⼤脑和肢⼲</p><p><img src="'+L+'" alt="1697122676840"></p><p><img src="'+S+'" alt="1697122690191"></p><p><img src="'+z+'" alt="1697122704597"></p><p>ZoneAwareLoadBalancer#chooseServer</p><p><img src="'+B+'" alt="1697122720290"></p><p>⽗类：com.netflix.loadbalancer.BaseLoadBalancer#chooseServer</p><p><img src="'+C+'" alt="1697122736765"></p><p>来到区域隔离策略的⽗类choose⽅法中 com.netflix.loadbalancer.PredicateBasedRule#choose</p><p><img src="'+I+'" alt="1697122757675"></p><p><img src="'+A+'" alt="1697122768440"></p><p><strong>前文我们提到的关注点3</strong></p><p><img src="'+T+'" alt="1697122811815"></p><p><img src="'+j+'" alt="1697122827347"></p><p>AbstractClientHttpRequest#execute</p><p>此处，就已经到了RestTemplate底层执⾏的代码了，由此也将验证最终请求的调⽤还是靠的RestTemplate</p><p><img src="'+E+'" alt="1697122856308"></p><p>接下来，在进⾏负载chooseServer的时候，LoadBalancer负载均衡器中已经有了serverList，那么这个serverList是什么时候被注⼊到LoadBalancer中的，它的⼀个机制⼤概是怎样的？</p><p>来到RibbonClientConfiguration</p><p><img src="'+q+'" alt="1697122893332"></p><p>把⽬光聚焦到使⽤这个空对象ServerList的地⽅</p><p><img src="'+N+'" alt="1697122912062"></p><p><img src="'+F+'" alt="1697122931381"></p><p>进⼊enableAndInitLearnNewServersFeature()⽅法</p><p><img src="'+O+`" alt="1697122958324"></p><hr><h3 id="_2-4-2-roundrobinrule-轮询策略源码剖析" tabindex="-1"><a class="header-anchor" href="#_2-4-2-roundrobinrule-轮询策略源码剖析" aria-hidden="true">#</a> 2.4.2 RoundRobinRule 轮询策略源码剖析</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//</span>
<span class="token comment">// Source code recreated from a .class file by IntelliJ IDEA</span>
<span class="token comment">// (powered by Fernflower decompiler)</span>
<span class="token comment">//</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">IClientConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoundRobinRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> nextServerCyclicCounter<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">AVAILABLE_ONLY_SERVERS</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">ALL_SERVERS</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">RoundRobinRule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">RoundRobinRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>nextServerCyclicCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">RoundRobinRule</span><span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span> lb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLoadBalancer</span><span class="token punctuation">(</span>lb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 负载均衡策略类核⼼⽅法</span>
        <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span> lb<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>lb <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;no load balancer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> count<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 所有可⽤服务实例列表</span>
                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> reachableServers <span class="token operator">=</span> lb<span class="token punctuation">.</span><span class="token function">getReachableServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 所有服务实例列表</span>
                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> allServers <span class="token operator">=</span> lb<span class="token punctuation">.</span><span class="token function">getAllServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">int</span> upCount <span class="token operator">=</span> reachableServers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">int</span> serverCount <span class="token operator">=</span> allServers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>upCount <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> serverCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 获得⼀个轮询索引</span>
                            <span class="token keyword">int</span> nextServerIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">incrementAndGetModulo</span><span class="token punctuation">(</span>serverCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment">// 根据索引取出服务实例对象</span>
                            server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Server</span><span class="token punctuation">)</span>allServers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nextServerIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                <span class="token comment">// 判断服务可⽤后返回</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> server<span class="token punctuation">.</span><span class="token function">isReadyToServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token keyword">return</span> server<span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                                server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;No up servers available from load balancer: &quot;</span> <span class="token operator">+</span> lb<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;No available alive servers after 10 tries from load balancer: &quot;</span> <span class="token operator">+</span> lb<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> server<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">incrementAndGetModulo</span><span class="token punctuation">(</span><span class="token keyword">int</span> modulo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> current<span class="token punctuation">;</span>
            <span class="token keyword">int</span> next<span class="token punctuation">;</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                <span class="token comment">// 取出上次的计数</span>
                current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextServerCyclicCounter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 因为是轮询，计数+1之后对总数取模</span>
                next <span class="token operator">=</span> <span class="token punctuation">(</span>current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> modulo<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextServerCyclicCounter<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> clientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-4-3-randomrule-随机策略源码剖析" tabindex="-1"><a class="header-anchor" href="#_2-4-3-randomrule-随机策略源码剖析" aria-hidden="true">#</a> 2.4.3 RandomRule 随机策略源码剖析</h3><p><img src="`+P+'" alt="1697123304973"></p><p><img src="'+U+'" alt="1697123316850"></p>',102),J=[Z];function G(M,W){return s(),a("div",null,J)}const H=n(V,[["render",G],["__file","42.html.vue"]]);export{H as default};
