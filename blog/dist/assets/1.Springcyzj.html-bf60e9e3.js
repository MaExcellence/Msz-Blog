import{_ as n,o as s,c as a,b as p}from"./app-1f8a5ff3.js";const e={},t=p(`<h1 id="spring常用注解" tabindex="-1"><a class="header-anchor" href="#spring常用注解" aria-hidden="true">#</a> spring常用注解</h1><h2 id="responsebody" tabindex="-1"><a class="header-anchor" href="#responsebody" aria-hidden="true">#</a> <strong>@ResponseBody</strong></h2><p>将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，</p><p>写入到response对象的body区，通常用来返回JSON数据或者是XML数据。</p><p>在使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中，</p><p>返回结果不会被解析为跳转路径。</p><p>他的效果等同于通过response对象输出指定格式的数据。</p><h2 id="requestbody" tabindex="-1"><a class="header-anchor" href="#requestbody" aria-hidden="true">#</a> <strong>@RequestBody</strong></h2><p>用于将前台发送过来固定格式的数据【xml格式 或者 json等】封装为对应的 JavaBean 对象，</p><h2 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> @component</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@component</span><span class="token punctuation">(</span><span class="token string">&quot;bookDao&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;book dao save ...&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件:</p><p>​</p><p>注意：@component 注解不可以添加在接口上,因为接口是无法创建对象的。</p><p>​ 注解写在那个类上 class的值就是该类的全类名</p><p>​ 一个注解就类似与一个Bean</p><p>​ 类如果没有起名称，所以在App中是按照类型来获取bean对象</p><p>​ @Component注解如果不起名称，会有一个默认值就是<code>当前类名首字母小写</code>，所以也可以按照名称获取</p><p>@Component注解，还衍生出了其他三个注解<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code></p><p>方便我们后期在编写类的时候能很好的区分出这个类是属于<code>表现层</code>、<code>业务层</code>还是<code>数据层</code>的类。</p><hr><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> @configuration</h2><p>在配置类上添加<code>@Configuration</code>注解，将其标识为一个配置类,替换<code>applicationContext.xml</code></p><h2 id="componentscan" tabindex="-1"><a class="header-anchor" href="#componentscan" aria-hidden="true">#</a> @ComponentScan</h2><p>在配置类上添加包扫描注解<code>@ComponentScan</code>替换\`\`</p><p>@ComponentScan注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式</p><p>@ComponentScan({com.itheima.service&quot;,&quot;com.itheima.dao&quot;})</p><p>在Spring的配置类上添加包扫描</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token comment">//**@ComponentScan**(&quot;com.itheima.config&quot;)</span>

<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">JdbcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式虽然能够扫描到，但是不能很快的知晓都引入了哪些配置类，所有这种方式不推荐使用。</p><hr><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> @Import</h2><p><strong>@Import({JdbcConfig.class})</strong></p><p>@Import参数需要的是一个数组，可以引入多个配置类。</p><p>@Import注解在配置类中只能写一次</p><hr><h2 id="scope" tabindex="-1"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> @Scope</h2><p><strong>@Scope(&quot;prototype&quot;) 设置bean的作用范围</strong></p><p>==默认值singleton（单例），可选值prototype（非单例）==</p><hr><h2 id="postconstruct" tabindex="-1"><a class="header-anchor" href="#postconstruct" aria-hidden="true">#</a> <strong>@PostConstruct</strong></h2><p>设置该方法为初始化方法</p><p>位置：方法上</p><hr><h2 id="predestroy" tabindex="-1"><a class="header-anchor" href="#predestroy" aria-hidden="true">#</a> <strong>@PreDestroy</strong></h2><p>设置该方法为销毁方法</p><p>位置：方法上</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;book dao save ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostConstruct</span> <span class="token comment">//在构造方法之后执行，替换 init-method</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PreDestroy</span> <span class="token comment">//在销毁方法之前执行,替换 destroy-method</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;destroy ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="autowired" tabindex="-1"><a class="header-anchor" href="#autowired" aria-hidden="true">#</a> <strong>@Autowired</strong></h2><p>(1) 在BookServiceImpl类的bookDao属性上添加<code>@Autowired</code>注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>  （引用数据类型）
    <span class="token keyword">private</span> <span class="token class-name">BookDao</span> bookDao<span class="token punctuation">;</span>
   

<span class="token comment">//	  public void setBookDao(BookDao bookDao) {</span>
<span class="token comment">//        this.bookDao = bookDao;</span>
<span class="token comment">//    }</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;book service save ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bookDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意:</strong></p><p>- @Autowired可以写在属性上，也可也写在setter方法上，最简单的处理方式是<code>写在属性上并将setter方法删除掉</code></p><p><strong>- 为什么setter方法可以删除呢?</strong></p><p>- 自动装配基于反射设计创建对象并通过暴力反射为私有属性进行设值</p><p>- 普通反射只能获取public修饰的内容</p><p>- 暴力反射除了获取public修饰的内容还可以获取private修改的内容</p><p>- 所以此处无需提供setter方法</p><p>(2)@Autowired是按照类型注入，那么对应BookDao接口如果有多个实现类，比如添加BookDaoImpl2</p><p>此时，按照类型注入就无法区分到底注入哪个对象，解决方案:<code>按照名称注入</code></p><p>- 先给两个Dao类分别起个名称</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">&quot;bookDao&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;book dao save ...&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">&quot;bookDao2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;book dao save ...2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时就可以注入成功，但是得思考个问题:</p><p>@AutoWired是按照类型注入的,给BookDao的两个实现起了名称，它还是有两个bean对象，为什么不报错?</p><p>-----@AutoWired默认按照类型自动装配 ,如果IOC容器中同类的Bean找到多个,就按照变量名和Bean的名称匹配</p><p>因为变量名叫<code>bookDao</code>而容器中也有一个<code>booDao</code>，所以可以成功注入。</p><p>--------分析下面这种情况是否能完成注入呢?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">&quot;bookDao1&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;book dao save ...&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">&quot;bookDao2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;book dao save ...2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>---------不行，因为按照类型会找到多个bean对象，此时会按照<code>bookDao</code>名称去找，</p><p>因为IOC容器只有名称叫<code>bookDao1</code>和<code>bookDao2</code>,所以找不到，会报<code>NoUniqueBeanDefinitionException</code></p><hr><h2 id="qualifier" tabindex="-1"><a class="header-anchor" href="#qualifier" aria-hidden="true">#</a> @Qualifier</h2><p>当根据类型在容器中找到多个bean,注入参数的属性名又和容器中bean的名称不一致，</p><p>这个时候该如何解决，就需要使用到<code>@Qualifier</code>来指定注入哪个名称的bean对象。</p><p>@Autowired</p><p>​ <strong>@Qualifier(&quot;bookDao1&quot;)</strong></p><p>​ private BookDao bookDao;</p><p>==注意:@Qualifier不能独立使用，必须和@Autowired一起使用==</p><p>==位置: 属性定义上方 或 标准set方法上方 或 类set方法上方</p><p>==作用:为引用类型属性指定注入的beanId</p><p>==value（默认）：设置注入的beanId</p><hr><h2 id="value" tabindex="-1"><a class="header-anchor" href="#value" aria-hidden="true">#</a> @Value</h2><p><strong>简单类型注入的是基本数据类型或者字符串类型，</strong></p><p>下面在<code>BookDaoImpl</code>类中添加一个<code>name</code>属性，用其进行简单类型注入</p><p><strong>@Value</strong>(&quot;itheima&quot;)</p><p>​ private String name;</p><p>注意数据格式要匹配，如将&quot;abc&quot;注入给int值，这样程序就会报错。</p><p>@Value\`一般会被用在从properties配置文件中读取内容进行使用</p><hr><h2 id="propertysource" tabindex="-1"><a class="header-anchor" href="#propertysource" aria-hidden="true">#</a> @PropertySource</h2><p>★★★★★ <strong>(PropertySource)</strong> 使用注解加载properties配置文件</p><p>注解属性中可以把<code>classpath:</code>加上,代表从当前项目的根路径找文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;classpath:jdbc.properties&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

可以使用\`<span class="token annotation punctuation">@PropertySource</span>\`的属性来指定多个

<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;xxx.properties&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>



jdbc<span class="token punctuation">.</span>properties

name<span class="token operator">=</span>itheima888



<span class="token annotation punctuation">@Configuration</span>

<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.itheima&quot;</span><span class="token punctuation">)</span>

<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>



使用<span class="token annotation punctuation">@Value</span>读取配置文件中的内容

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${name}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bean" tabindex="-1"><a class="header-anchor" href="#bean" aria-hidden="true">#</a> @Bean</h2><p><strong>@Bean</strong>作用：<strong>是将方法的返回值制作为Spring管理的一个bean对象</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">DruidDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ds<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意:不能使用<code>DataSource ds = new DruidDataSource()</code></strong></p><p>因为DataSource接口中没有对应的setter方法来设置属性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">AnnotationConfigApplicationContext</span> ctx <span class="token operator">=</span> 

<span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="runwith" tabindex="-1"><a class="header-anchor" href="#runwith" aria-hidden="true">#</a> @RunWith</h2><h2 id="contextconfiguration" tabindex="-1"><a class="header-anchor" href="#contextconfiguration" aria-hidden="true">#</a> @ContextConfiguration</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//设置类运行器</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>

<span class="token comment">//设置Spring环境对应的配置类</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//加载配置类</span>

<span class="token comment">//@ContextConfiguration(locations={&quot;classpath:applicationContext.xml&quot;})//加载配置文件</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>

 <span class="token comment">//支持自动装配注入bean</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Test</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accountService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accountService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aop注解" tabindex="-1"><a class="header-anchor" href="#aop注解" aria-hidden="true">#</a> AOP注解</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token constant">AOP</span>实现步骤<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token number">1.</span>添加依赖
<span class="token number">2.</span>定义接口与实现类
<span class="token number">3.</span>定义通知类和通知
 <span class="token operator">==</span><span class="token operator">==</span>通知就是将共性功能抽取出来后形成的方法，
 <span class="token operator">==</span><span class="token operator">==</span>共性功能指的就是当前系统时间的打印。
<span class="token number">4.</span>定义切入点
<span class="token number">5.</span>制作切面
  <span class="token operator">==</span><span class="token operator">=</span>切面是用来描述通知和切入点之间的关系，如何进行关系的绑定<span class="token operator">?</span>
<span class="token number">6.</span>将通知类配给容器并标识其为切面类
<span class="token number">7.</span>开始注解格式<span class="token constant">AOP</span>功能
<span class="token number">8.</span>运行程序
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>


★★★★★ <span class="token punctuation">(</span><span class="token class-name">Pointcut</span><span class="token punctuation">)</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAdvice</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(void com.itheima.dao.BookDao.update())&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

切入点定义依托一个不具有实际意义的方法进行，即无参数、无返回值、方法体无实际逻辑。



制作切面：
切面是用来描述通知和切入点之间的关系，如何进行关系的绑定<span class="token operator">?</span>
<span class="token class-name">Before</span>

绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行<span class="token operator">==</span>位置<span class="token operator">==</span>
 <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;pt()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>


<span class="token annotation punctuation">@Aspect</span>     将通知类配给容器并标识其为切面类
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAdvice</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(void com.itheima.dao.BookDao.update())&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    

    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;pt()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>



★★★★★ <span class="token punctuation">(</span><span class="token class-name">EnableAspectJAutoProxy</span><span class="token punctuation">)</span> 

<span class="token annotation punctuation">@EnableAspectJAutoProxy</span> 开启注解格式<span class="token constant">AOP</span>功能

<span class="token annotation punctuation">@Configuration</span>

<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.itheima&quot;</span><span class="token punctuation">)</span>

<span class="token annotation punctuation">@EnableAspectJAutoProxy</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>



<span class="token annotation punctuation">@After</span>   设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法后运行

<span class="token annotation punctuation">@AfterReturning</span>  当前通知方法在原始切入点方法正常执行完毕后执行

<span class="token annotation punctuation">@AfterThrowing</span>  当前通知方法在原始切入点方法运行抛出异常后执行

<span class="token annotation punctuation">@Around</span>  当前通知方法在原始切入点方法前后运行

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>

获取切入点方法的参数，所有的通知类型都可以获取参数

<span class="token operator">-</span> <span class="token class-name">JoinPoint</span>：适用于前置、后置、返回后、抛出异常后通知

<span class="token operator">-</span> <span class="token class-name">ProceedingJoinPoint</span>：适用于环绕通知


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="transactional" tabindex="-1"><a class="header-anchor" href="#transactional" aria-hidden="true">#</a> @Transactional</h2><p>Spring为了管理事务，提供了一个平台事务管理器\`PlatformTransactionManager</p><p><strong>@Transactional</strong>可以写在接口类上、接口方法上、实现类上和实现类方法上</p><p>- 写在接口类上，该接口的所有实现类的所有方法都会有事务</p><p>- 写在接口方法上，该接口的所有实现类的该方法都会有事务</p><p>- 写在实现类上，该类中的所有方法都会有事务</p><p>- 写在实现类方法上，该方法上有事务</p><p>- ==建议写在实现类或实现类的方法上==</p><p>这些属性都可以在<code>@Transactional</code>注解的参数上进行设置。</p><p>- readOnly：true只读事务，false读写事务，增删改要设为false,查询设为true。</p><p>- timeout:设置超时时间单位秒，在多长时间之内事务没有提交成功就自动回滚，-1表示不设置超时时间。</p><p>- rollbackFor:当出现指定异常进行事务回滚</p><p>​ =====Spring的事务只会对<code>Error异常</code>和<code>RuntimeException异常</code>及其子类进行事务回顾，其他的异常类型是不会回滚的，对应IOException不符合上述条件所以不回滚</p><p>​ ==== @Transactional(rollbackFor = {IOException.class})</p><p>- noRollbackFor:当出现指定异常不进行事务回滚</p><p>- rollbackForClassName等同于rollbackFor,只不过属性为异常的类全名字符串</p><p>- noRollbackForClassName等同于noRollbackFor，只不过属性为异常的类全名字符串</p><p>- isolation设置事务的隔离级别</p><p>​ - DEFAULT :默认隔离级别, 会采用数据库的隔离级别</p><p>​ - READ_UNCOMMITTED : 读未提交</p><p>​ - READ_COMMITTED : 读已提交</p><p>​ - REPEATABLE_READ : 重复读取</p><p>​ - SERIALIZABLE: 串行化</p><p>1.读未提交（Read uncommitted）：</p><p>这种事务隔离级别下，select语句不加锁。</p><p>此时，可能读取到不一致的数据，即“读脏 ”。这是并发最高，一致性最差的隔离级别。</p><p>​ 2.读已提交（Read committed）：</p><p>可避免 脏读 的发生。</p><p>在互联网大数据量，高并发量的场景下，几乎 不会使用 上述两种隔离级别。</p><p>​ 3.可重复读（Repeatable read）：</p><p>MySql默认隔离级别。</p><p>可避免 脏读 、不可重复读 的发生。</p><p>​ 4.串行化（Serializable ）：</p><p>可避免 脏读、不可重复读、幻读 的发生</p><p>在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读) ；而在 Oracle数据库 中，只支持Serializable (串行化) 级别和 Read committed (读已提交) 这两种级别，其中默认的为 Read committed（读已提交） 级别。</p><hr><h2 id="enabletransactionmanagement" tabindex="-1"><a class="header-anchor" href="#enabletransactionmanagement" aria-hidden="true">#</a> @EnableTransactionManagement</h2><p>//开启注解式事务驱动</p><p><strong>@EnableTransactionManagement</strong></p><hr><h2 id="requestmapping" tabindex="-1"><a class="header-anchor" href="#requestmapping" aria-hidden="true">#</a> @RequestMapping</h2><p><strong>@RequestMapping</strong> 是一个用来处理请求地址映射的注解，可用于类或方法上</p><p>用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径</p><p>用于方法上，表示在类的父路径下追加方法上注解中的地址将会访问到该方法</p><p>// 用于类上，可以没有</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@RequestMapping(value = &quot;/a&quot;)

public class Index {

	// 用于方法上，必须有
    @RequestMapping(value = &quot;/b&quot;)
    public String idx() {
        return &quot;HelloWorld&quot;;
    }

}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则访问路径为http://localhost:8080/a/b，访问该路径就会跳转到HelloWorld页面。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>

<span class="token annotation punctuation">@ResponseBody</span>

<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="pathvariable" tabindex="-1"><a class="header-anchor" href="#pathvariable" aria-hidden="true">#</a> @PathVariable</h2><p><strong>@PathVariable</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//@PathVariable主要作用：映射URL绑定的占位符带占位符的URL是 Spring3.0 新增的功能，URL中的 {xxx} 占位符可以通过 @PathVariable(“xxx”) 绑定到操作方法的入参中。</span>

例如：

<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;路径上的占位符的值=&quot;</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="requestparam" tabindex="-1"><a class="header-anchor" href="#requestparam" aria-hidden="true">#</a> @RequestParam</h2><p>*<strong>同名请求参数可以使用</strong>@RequestParam注解映射到对应名称的集合对象中作为数据</p><p>@RequestParam</p><p>//开启json数据类型自动转换</p><p><strong>@EnableWebMvc</strong></p><p>//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</p><p>@RestControllerAdvice</p><p>//@ExceptionHandler用于设置当前处理器类对应的异常类型</p><p>​ @ExceptionHandler(SystemException.class)</p><p>===========================================================================</p><p>//addResourceHandler(&quot;/pages/**&quot;)</p><p>​ //表示文件路径，这里的意思是pages包下的所有文件，所有/pages/开头的请求 都会去后面配置的路径下查找资源</p><p>​ //====================================</p><p>​ //addResourceLocations(&quot;/pages/&quot;)</p><p>​ ////表示要开放的资源</p><p><strong>@Configuration</strong></p><p>public class SpringMvcSupport extends WebMvcConfigurationSupport {</p><p>​ @Override</p><p>​ protected void addResourceHandlers(ResourceHandlerRegistry registry) {</p><p>​ //addResourceHandler(&quot;/pages/**&quot;)</p><p>​ //表示文件路径，这里的意思是pages包下的所有文件，所有/pages/开头的请求 都会去后面配置的路径下查找资源</p><p>​ //====================================</p><p>​ //addResourceLocations(&quot;/pages/&quot;)</p><p>​ ////表示要开放的资源</p><p>​ registry.addResourceHandler(&quot;/pages/**&quot;).addResourceLocations(&quot;/pages/&quot;);</p><p>​ registry.addResourceHandler(&quot;/css/**&quot;).addResourceLocations(&quot;/css/&quot;);</p><p>​ registry.addResourceHandler(&quot;/js/**&quot;).addResourceLocations(&quot;/js/&quot;);</p><p>​ registry.addResourceHandler(&quot;/plugins/**&quot;).addResourceLocations(&quot;/plugins/&quot;);</p><p>​ }</p><p>========================================================================</p><p>------------Mybaties-plus----------</p><p>//设置当前属性对应的数据库表中的字段关系</p><p>@TableField</p><p>value(默认)：设置数据库表字段名称</p><p>exist:设置属性在数据库表字段中是否存在，默认为true，此属性不能与value合并使用</p><p>select:设置属性是否参与查询，此属性与select()映射配置不冲突</p><p>//设置当前类对应于数据库表关系</p><p>@TableName</p><p>//设置当前类中主键属性的生成策略</p><p>@TableId</p><p>value(默认)：设置数据库表主键名称</p><p>type:设置主键属性的生成策略，值查照IdType的枚举值</p><p>================================</p><p>- NONE: 不设置id生成策略</p><p>- INPUT:用户手工输入id</p><p>- ASSIGN_ID:雪花算法生成id(可兼容数值型与字符串型)</p><p>- ASSIGN_UUID:以UUID生成算法作为id生成策略</p><p>- 其他的几个策略均已过时，都将被ASSIGN_ID和ASSIGN_UUID代替掉。</p><p>=================================</p><p>//TableLogic(value = &quot;0&quot;,delval =&quot;1&quot;) value为正常数据的值 delval为删除数据的值</p><p>@TableLogic</p><p>@Version</p><p>@ExceptionHandler：统一处理某一类异常，从而能够减少代码重复率和复杂度</p><p>@ControllerAdvice：异常集中处理，更好的使业务逻辑与异常处理剥离开；其是对Controller层进行拦截</p><p>@ResponseStatus：可以将某种异常映射为HTTP状态码</p><p>Spring部分</p><p>1、声明bean的注解</p><p>@Component 组件，没有明确的角色</p><p>@Service 在业务逻辑层使用(service层)</p><p>@Repository 在数据访问层使用(dao层)</p><p>@Controller 在展现层使用，控制器的声明(C)</p><p>2、注入bean的注解</p><p>@Autowired：由Spring提供</p><p>@Inject：由JSR-330提供</p><p>@Resource：由JSR-250提供</p><p>都可以注解在set方法和属性上，推荐注解在属性上(一目了然，少写代码)。</p><p>3、Java配置类相关注解</p><p>@Configuration 声明当前类为配置类，相当于xml形式的Spring配置(类上)</p><p>@Bean 注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式(方法上)</p><p>@Configuration 声明当前类为配置类，其中内部组合了@Component注解，表明这个类是一个bean(类上)</p><p>@ComponentScan 用于对Component进行扫描，相当于xml中的(类上)</p><p>@WishlyConfiguration 为@Configuration与@ComponentScan的组合注解，可以替代这两个注解</p><p>4、切面(AOP)相关注解</p><p>Spring支持AspectJ的注解式切面编程。</p><p>@Aspect 声明一个切面(类上)</p><p>使用@After、@Before、@Around定义建言(advice)，可直接将拦截规则(切点)作为参数。</p><p>@After 在方法执行之后执行(方法上)</p><p>@Before 在方法执行之前执行(方法上)</p><p>@Around 在方法执行之前与之后执行(方法上)</p><p>@PointCut 声明切点</p><p>在Java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持(类上)</p><p>5、@Bean的属性支持</p><p>@Scope 设置Spring容器如何新建Bean实例(方法上，得有@Bean)</p><p>其设置类型包括：</p><p>Singleton (单例,一个Spring容器中只有一个bean实例，默认模式),</p><p>Protetype (每次调用新建一个bean),</p><p>Request (web项目中，给每个http request新建一个bean),</p><p>Session (web项目中，给每个http session新建一个bean),</p><p>GlobalSession(给每一个 global http session新建一个Bean实例)</p><p>@StepScope 在Spring Batch中还有涉及</p><p>@PostConstruct 由JSR-250提供，在构造函数执行完之后执行，等价于xml配置文件中bean的initMethod</p><p>@PreDestory 由JSR-250提供，在Bean销毁之前执行，等价于xml配置文件中bean的destroyMethod</p><p>6、@Value注解</p><p>@Value 为属性注入值(属性上)</p><p>支持如下方式的注入：</p><p>》注入普通字符</p><p>@Value(&quot;Michael Jackson&quot;)</p><p>String name;</p><p>》注入操作系统属性</p><p>@Value(&quot;#{systemProperties[&#39;os.name&#39;]}&quot;)</p><p>String osName;</p><p>》注入表达式结果</p><p>@Value(&quot;#{ T(java.lang.Math).random() * 100 }&quot;)</p><p>String randomNumber;</p><p>》注入其它bean属性</p><p>@Value(&quot;#{domeClass.name}&quot;)</p><p>String name;</p><p>》注入文件资源</p><p>@Value(&quot;classpath:com/hgs/hello/test.txt&quot;)</p><p>String Resource file;</p><p>》注入网站资源</p><p>@Value(&quot;http://www.cznovel.com&quot;)</p><p>Resource url;12</p><p>》注入配置文件</p><p>@Value(&quot;\${book.name}&quot;)</p><p>String bookName;</p><p>注入配置使用方法：</p><p>① 编写配置文件(test.properties)</p><p>book.name=《三体》</p><p>② @PropertySource 加载配置文件(类上)</p><p>@PropertySource(&quot;classpath:com/hgs/hello/test/test.propertie&quot;)</p><p>③ 还需配置一个PropertySourcesPlaceholderConfigurer的bean。</p><p>7、环境切换</p><p>@Profile 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境。(类或方法上)</p><p>@Conditional Spring4中可以使用此注解定义条件话的bean，通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。(方法上)</p><p>8、异步相关</p><p>@EnableAsync 配置类中，通过此注解开启对异步任务的支持，叙事性AsyncConfigurer接口(类上)</p><p>@Async 在实际执行的bean方法使用该注解来申明其是一个异步任务(方法上或类上所有的方法都将异步，需要@EnableAsync开启异步任务)</p><p>9、定时任务相关</p><p>@EnableScheduling 在配置类上使用，开启计划任务的支持(类上)</p><p>@Scheduled 来申明这是一个任务，包括cron,fixDelay,fixRate等类型(方法上，需先开启计划任务的支持)</p><p>10、@Enable*注解说明</p><p>这些注解主要用来开启对xxx的支持。</p><p>@EnableAspectJAutoProxy 开启对AspectJ自动代理的支持</p><p>@EnableAsync 开启异步方法的支持</p><p>@EnableScheduling 开启计划任务的支持</p><p>@EnableWebMvc 开启Web MVC的配置支持</p><p>@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</p><p>@EnableJpaRepositories 开启对SpringData JPA Repository的支持</p><p>@EnableTransactionManagement 开启注解式事务的支持</p><p>@EnableTransactionManagement 开启注解式事务的支持</p><p>@EnableCaching 开启注解式的缓存支持</p><p>11、测试相关注解</p><p>@RunWith 运行器，Spring中通常用于对JUnit的支持</p><p>@RunWith(SpringJUnit4ClassRunner.class)1</p><p>@ContextConfiguration 用来加载配置ApplicationContext，其中classes属性用来加载配置类</p><p>@ContextConfiguration(classes={TestConfig.class})1</p><p>Spring MVC部分</p><p>@EnableWebMvc 在配置类中开启Web MVC的配置支持，如一些ViewResolver或者MessageConverter等，若无此句，重写WebMvcConfigurerAdapter方法(用于对SpringMVC的配置)。</p><p>@Controller 声明该类为SpringMVC中的Controller</p><p>@RequestMapping 用于映射Web请求，包括访问路径和参数(类或方法上)</p><p>@ResponseBody 支持将返回值放在response内，而不是一个页面，通常用户返回json数据(返回值旁或方法上)</p><p>@RequestBody 允许request的参数在request体中，而不是在直接连接在地址后面。(放在参数前)</p><p>@PathVariable 用于接收路径参数，比如@RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。</p><p>@RestController 该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。</p><p>@ControllerAdvice 通过该注解，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller的类的方法可使用@ExceptionHandler、@InitBinder、@ModelAttribute注解到方法上，</p><p>这对所有注解了 @RequestMapping的控制器内的方法有效。</p><p>@ExceptionHandler 用于全局处理控制器里的异常</p><p>@InitBinder 用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中。</p><p>@ModelAttribute 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对。</p>`,318),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","1.Springcyzj.html.vue"]]);export{r as default};
