import{_ as p,r as o,o as c,c as i,b as n,d as s,e,a}from"./app-ad70bc3c.js";const l="/msz-blog/assets/1697979113978-edd0092a.png",u="/msz-blog/assets/1697979130394-2545b31d.png",r="/msz-blog/assets/1697979169348-f43e6a8a.png",k="/msz-blog/assets/1697979954625-3ea01886.png",d="/msz-blog/assets/1697981188025-0972c928.png",m="/msz-blog/assets/1697981321303-93c890a6.png",v="/msz-blog/assets/1697981343650-8dc3b2dd.png",b="/msz-blog/assets/1697981382803-c44746b9.png",g="/msz-blog/assets/1697981416291-c1e80109.png",y="/msz-blog/assets/1697981436643-4aef0a01.png",h="/msz-blog/assets/1697981465525-a3ef4bd3.png",x="/msz-blog/assets/1697981863352-28679e6d.png",f="/msz-blog/assets/1697981993010-e5b1a1eb.png",w="/msz-blog/assets/1697982281316-b910404f.png",q="/msz-blog/assets/1697982399908-a55e5336.png",_="/msz-blog/assets/1697982417635-d41e0c66.png",I="/msz-blog/assets/1697982554176-730573ac.png",S="/msz-blog/assets/1697982572359-41c5dcdb.png",H="/msz-blog/assets/1697982599950-520e7721.png",P="/msz-blog/assets/1697982757487-02e7b21c.png",T="/msz-blog/assets/1697982915047-e3579624.png",C="/msz-blog/assets/1697982954991-b9f3fdb0.png",B="/msz-blog/assets/1697982985590-ceaf9271.png",j="/msz-blog/assets/1697983008138-14f7dc65.png",z="/msz-blog/assets/1697983028211-292d06b2.png",R="/msz-blog/assets/1697983051179-014b83de.png",O="/msz-blog/assets/1697983070007-c2d0754d.png",A="/msz-blog/assets/1697983166144-94a04c38.png",M="/msz-blog/assets/1697986268123-ef8ef8ea.png",E="/msz-blog/assets/1697986279399-8696284a.png",V="/msz-blog/assets/1697986307433-b1bd547b.png",F="/msz-blog/assets/1697986318299-88a7e2d8.png",D="/msz-blog/assets/1697986334701-ef0dd87e.png",L="/msz-blog/assets/1697986344564-9b4ed6c8.png",G="/msz-blog/assets/1697986380377-30105484.png",N="/msz-blog/assets/1697986404520-ec4932dc.png",$={},Q=a('<h2 id="_3-1-微服务中的雪崩效应" tabindex="-1"><a class="header-anchor" href="#_3-1-微服务中的雪崩效应" aria-hidden="true">#</a> <strong>3.1</strong> <strong>微服务中的雪崩效应</strong></h2><p><strong>什么是微服务中的雪崩效应呢？</strong></p><p>微服务中，⼀个请求可能需要多个微服务接口才能实现，会形成复杂的调用链路。</p><p><img src="'+l+'" alt="1697979113978"></p><p><img src="'+u+'" alt="1697979130394"></p><p><img src="'+r+'" alt="1697979169348"></p><p>扇入：代表着该微服务被调⽤的次数，扇入大，说明该模块复用性好</p><p>扇出：该微服务调⽤其他微服务的个数，扇出大，说明业务逻辑复杂</p><p>扇⼊大是⼀个好事，扇出大不⼀定是好事</p><p>在微服务架构中，⼀个应⽤可能会有多个微服务组成，微服务之间的数据交互通过远程过程调⽤完成。这就带来⼀个问题，假设微服务A调⽤微服务B和微服务C，微 服务B和微服务C⼜调⽤其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调⽤响应时间过⻓或者不可用，对微服务A的调⽤就会占⽤越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p><p>如图中所示，最下游<strong>简历微服务</strong>响应时间过⻓，⼤量请求阻塞，⼤量线程不会释放，会导致服务器资源耗尽，最终导致上游服务甚⾄整个系统瘫痪。</p><hr><h2 id="_3-2-雪崩效应解决方案" tabindex="-1"><a class="header-anchor" href="#_3-2-雪崩效应解决方案" aria-hidden="true">#</a> <strong>3.2</strong> <strong>雪崩效应解决方案</strong></h2><p>从可用性可靠性着想，为防止系统的整体缓慢甚⾄崩溃，采用的技术手段； 下面，我们介绍三种技术手段应对微服务中的雪崩效应，这三种手段都是从系统可用性、可靠性角度出发，尽量防⽌系统整体缓慢甚至瘫痪。</p><p><strong>服务熔断</strong></p><p>熔断机制是应对雪崩效应的⼀种微服务链路保护机制。我们在各种场景下都会接触到熔断这两个字。⾼压电路中，如果某个地⽅的电压过⾼，熔断器就会熔断，对电路进⾏保护。股票交易中，如果股票指数过⾼，也会采⽤熔断机制，暂停股票的交易。同样，在微服务架构中，熔断机制也是起着类似的作⽤。当扇出链路的某个微服务不可⽤或者响应时间太⻓时，熔断该节点微服务的调⽤，进⾏服务的降级，快速返回错误的响应信息。当检测到该节点微服务调⽤响应正常后，恢复调用链路。</p>',16),U=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"注意：")]),n("p",null,"1）服务熔断重点在断，切断对下游服务的调用"),n("p",null,"2）服务熔断和服务降级往往是⼀起使⽤的，Hystrix就是这样。")],-1),J=a('<p><strong>服务降级</strong></p><p>通俗讲就是整体资源不够⽤了，先将⼀些不关紧的服务停掉（调⽤我的时候，给你返回⼀个预留的值，也叫做<strong>兜底数据</strong>），待渡过难关⾼峰过去，再把那些服务打开。</p><p>服务降级⼀般是从整体考虑，就是当某个服务熔断之后，服务器将不再被调⽤，此刻客户端可以自己准备⼀个本地的fallback回调，返回⼀个缺省值，这样做，虽然服务水平下降，但好歹可⽤，比直接挂掉要强。</p><p><strong>服务限流</strong></p><p>服务降级是当服务出问题或者影响到核⼼流程的性能时，暂时将服务屏蔽掉，待高峰或者问题解决后再打开；但是有些场景并不能⽤服务降级来解决，比如秒杀业务这样的核⼼功能，这个时候可以结合服务限流来限制这些场景的并发/请求量限流措施也很多，比如</p><ul><li>限制总并发数（⽐如数据库连接池、线程池）</li><li>限制瞬时并发数（如nginx限制瞬时并发连接数）</li><li>限制时间窗⼝内的平均速率（如Guava的RateLimiter、nginx的limit_req模块，限制每秒的平均速率）</li><li>限制远程接⼝调⽤速率、限制MQ的消费速率等</li></ul><hr><h2 id="_3-3-hystrix-简介" tabindex="-1"><a class="header-anchor" href="#_3-3-hystrix-简介" aria-hidden="true">#</a> <strong>3.3 Hystrix 简介</strong></h2><p>**[来自官网]**Hystrix（豪猪-----&gt;刺），宣⾔“defend your app”是由Netflix开源的⼀个延迟和容错库，⽤于隔离访问远程系统、服务或者第三⽅库，防⽌级联失败，从而提升系统的可⽤性与容错性。Hystrix主要通过以下几点实现延迟和容错。</p><ul><li>包裹请求：使⽤HystrixCommand包裹对依赖的调⽤逻辑。 ⾃动投递微服务方法（@HystrixCommand 添加Hystrix控制） ——调⽤简历微服务</li><li>跳闸机制：当某服务的错误率超过⼀定的阈值时，Hystrix可以跳闸，停止请求该服务⼀段时间。</li><li>资源隔离：Hystrix为每个依赖都维护了⼀个小型的线程池(舱壁模式)（或者信号量）。如果该线程池已满， 发往该依赖的请求就被⽴即拒绝，⽽不是排队等待，从而加速失败判定。</li><li>监控：Hystrix可以近乎实时地监控运⾏指标和配置的变化，例如成功、失败、超时、以及被拒绝 的请求等。</li><li>回退机制：当请求失败、超时、被拒绝，或当断路器打开时，执⾏回退逻辑。回退逻辑由开发⼈员自行提供，例如返回⼀个缺省值。</li><li>自我修复：断路器打开⼀段时间后，会⾃动进⼊“半开”状态。</li></ul><hr><h2 id="_3-4-hystrix-熔断应用" tabindex="-1"><a class="header-anchor" href="#_3-4-hystrix-熔断应用" aria-hidden="true">#</a> <strong>3.4 Hystrix 熔断应用</strong></h2><p>**目的：**简历微服务长时间没有响应，服务消费者—&gt;<strong>⾃动投递微服务</strong>快速失败给用户提示</p><p><img src="'+k+`" alt="1697979954625"></p><ul><li>服务消费者工程（⾃动投递微服务）中引⼊Hystrix依赖坐标（也可以添加在父工程中）</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--熔断器Hystrix--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>服务消费者⼯程（自动投递微服务）的启动类中添加熔断器开启注解 @EnableCircuitBreaker</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">EntityScan</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>circuitbreaker<span class="token punctuation">.</span></span><span class="token class-name">EnableCircuitBreaker</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">LoadBalanced</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span></span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 注解简化写法
     * @SpringCloudApplication =
     @SpringBootApplication+@EnableDiscoveryClient+@EnableCircuitBreaker
     */</span>
    <span class="token annotation punctuation">@SpringBootApplication</span>
    <span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment">// 开启服务发现</span>
    <span class="token annotation punctuation">@EnableCircuitBreaker</span> <span class="token comment">// 开启熔断</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutodeliverApplication</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AutodeliverApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         * 注⼊RestTemplate
         * <span class="token keyword">@return</span>
         */</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token comment">// Ribbon负载均衡</span>
        <span class="token annotation punctuation">@LoadBalanced</span>
        <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义服务降级处理⽅法，并在业务⽅法上使⽤@HystrixCommand的 fallbackMethod属性关联到服务降级处理方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">HystrixCommand</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">HystrixProperty</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ServiceInstance</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">DiscoveryClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/autodeliver&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutodeliverController</span> <span class="token punctuation">{</span>
    
 <span class="token annotation punctuation">@Autowired</span>
 <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>
 
 <span class="token comment">// /autodeliver/checkState/1545132</span>
 <span class="token comment">/* @GetMapping(&quot;/checkState/{userId}&quot;)
public Integer findResumeOpenState(@PathVariable Long userId) {
 // 调⽤远程服务—&gt; 简历微服务接⼝ RestTemplate -&gt; JdbcTempate
 // httpclient封装好多内容进⾏远程调⽤
Integer forObject = restTemplate.getForObject(&quot;http://localhost:8080/resume/openstate/&quot; + userId, Integer.class);
return forObject;
}
*/</span>

 <span class="token annotation punctuation">@Autowired</span>
 <span class="token keyword">private</span> <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>
 <span class="token doc-comment comment">/**
 * 服务注册到Eureka之后的改造
 * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
 * <span class="token keyword">@return</span>
 */</span> <span class="token comment">/*@GetMapping(&quot;/checkState/{userId}&quot;)
 public Integer findResumeOpenState(@PathVariable Long userId) {
 // TODO 从Eureka Server中获取我们关注的那个服务的实例信息以及接⼝信息
 // 1、从 Eureka Server中获取lagou-service-resume服务的实例信息（使⽤客户端对象做这件事）
 List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;lagou-service-resume&quot;);
 // 2、如果有多个实例，选择⼀个使⽤(负载均衡的过程)
 ServiceInstance serviceInstance = instances.get(0);
 // 3、从元数据信息获取host port
 String host = serviceInstance.getHost();
 int port = serviceInstance.getPort();
 String url = &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/resume/openstate/&quot; + userId;
 System.out.println(&quot;===============&gt;&gt;&gt;从EurekaServer集群获取服务实例拼接的url：&quot; + url);
 // 调⽤远程服务—&gt; 简历微服务接⼝ RestTemplate -&gt;JdbcTempate
 // httpclient封装好多内容进⾏远程调⽤
 Integer forObject = restTemplate.getForObject(url,Integer.class);
 return forObject;
 }
 */</span>
 
 <span class="token doc-comment comment">/**
 * 使⽤Ribbon负载均衡
 * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
 * <span class="token keyword">@return</span>
 */</span>
 <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/checkState/{userId}&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">findResumeOpenState</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 使⽤ribbon不需要我们⾃⼰获取服务实例然后选择⼀个那么去访问了（⾃⼰的负载均衡）</span>
 <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://lagou-service-resume/resume/openstate/&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span> 
 <span class="token comment">// 指定服务名 </span>
 <span class="token class-name">Integer</span> forObject <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> forObject<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 
 <span class="token doc-comment comment">/**
 * 提供者模拟处理超时，调⽤⽅法添加Hystrix控制
 * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
 * <span class="token keyword">@return</span>
 */</span>
 <span class="token comment">// 使⽤@HystrixCommand注解进⾏熔断控制</span>
 <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>
         <span class="token comment">// 线程池标识，要保持唯⼀，不唯⼀的话就共⽤了</span>
         threadPoolKey <span class="token operator">=</span> <span class="token string">&quot;findResumeOpenStateTimeout&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 线程池细节属性配置</span>
         threadPoolProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
             <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;coreSize&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 线程数</span>
             <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;maxQueueSize&quot;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 等待队列⻓度</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token comment">// commandProperties熔断的⼀些细节属性配置</span>
         commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
             <span class="token comment">// 每⼀个属性都是⼀个HystrixProperty</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">&quot;2000&quot;</span><span class="token punctuation">)</span>
         <span class="token punctuation">}</span>
 <span class="token punctuation">)</span>
 
 <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/checkStateTimeout/{userId}&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">findResumeOpenStateTimeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 使⽤ribbon不需要我们⾃⼰获取服务实例然后选择⼀个那么去访问了（⾃⼰的负载均衡）</span>
 <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://lagou-service-resume/resume/openstate/&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span> <span class="token comment">// 指定服务名</span>
 <span class="token class-name">Integer</span> forObject <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> forObject<span class="token punctuation">;</span>
 <span class="token punctuation">}</span> 
 
 <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/checkStateTimeoutFallback/{userId}&quot;</span><span class="token punctuation">)</span>
 <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>
 <span class="token comment">// 线程池标识，要保持唯⼀，不唯⼀的话就共⽤了</span>
 threadPoolKey <span class="token operator">=</span><span class="token string">&quot;findResumeOpenStateTimeoutFallback&quot;</span><span class="token punctuation">,</span>
 <span class="token comment">// 线程池细节属性配置</span>
 threadPoolProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;coreSize&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 线程数</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;maxQueueSize&quot;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 等待队列⻓度</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token comment">// commandProperties熔断的⼀些细节属性配置</span>
 commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token comment">// 每⼀个属性都是⼀个HystrixProperty</span>
 <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">&quot;2000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// hystrix⾼级配置，定制⼯作过程细节</span>
 <span class="token comment">// 统计时间窗⼝定义</span>
 <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;metrics.rollingStats.timeInMilliseconds&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;8000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// 统计时间窗⼝内的最⼩请求数</span>
 <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;circuitBreaker.requestVolumeThreshold&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// 统计时间窗⼝内的错误数量百分⽐阈值</span>
 <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;circuitBreaker.errorThresholdPercentage&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;50&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// ⾃我修复时的活动窗⼝⻓度</span>
 <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;circuitBreaker.sleepWindowInMilliseconds&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;3000&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
 fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;myFallBack&quot;</span> <span class="token comment">// 回退⽅法 )</span>
 <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">findResumeOpenStateTimeoutFallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 使⽤ribbon不需要我们⾃⼰获取服务实例然后选择⼀个那么去访问了（⾃⼰的负载均衡）</span>
 <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://lagou-service-resume/resume/openstate/&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span> <span class="token comment">// 指定服务名</span>
 <span class="token class-name">Integer</span> forObject <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> forObject<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 
 <span class="token comment">/*
 定义回退⽅法，返回预设默认值
 注意：该⽅法形参和返回值与原始⽅法保持⼀致
 */</span>
 <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">myFallBack</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">123333</span><span class="token punctuation">;</span> <span class="token comment">// 兜底数据</span>
 <span class="token punctuation">}</span>
 <span class="token doc-comment comment">/**
 * 1）服务提供者处理超时，熔断，返回错误信息
 * 2）有可能服务提供者出现异常直接抛出异常信息
 *
 * 以上信息，都会返回到消费者这⾥，很多时候消费者服务不希望把收到异常/错误信息再抛到它的上游去
 * ⽤户微服务 — 注册微服务 — 优惠券微服务
 * 1 登记注册
 * 2 分发优惠券（并不是核⼼步骤），这⾥如果调⽤优惠券微服务返回了异常信息或者是熔断后的错误信息，这些信息如果抛给⽤户很不友好
 * 此时，我们可以返回⼀个兜底数据，预设的默认值（服务降级）
 *
 *
 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="1697981188025"></p><p><strong>注意</strong></p><p>降级（兜底）⽅法必须和被降级⽅法相同的⽅法签名（相同参数列表、相同返回值）</p><p>可以在类上使用@DefaultProperties注解统⼀指定整个类中共用的降级（兜底）方法</p><p>服务提供者端（简历微服务）模拟请求超时（线程休眠3s），只修改8080实例，8081不修改，对比观察</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ResumeService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/resume&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResumeController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${server.port}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ResumeService</span> resumeService<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取简历开放状态的url：/resume/openstate/<span class="token punctuation">{</span>userId<span class="token punctuation">}</span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">userId</span> ⽤户id
     * <span class="token keyword">@return</span> 0-关闭，1-打开，2-简历未达到投放标准被动关闭 3-从未设置过开放简历
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/openstate/{userId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">findResumeOpenState</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 模拟请求超时,触发服务消费者端熔断降级</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//return</span>
        resumeService<span class="token punctuation">.</span><span class="token function">findDefaultResume</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIsOpenResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> port<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们已经使⽤了Ribbon负载（轮询），所以我们在请求的时候，⼀次熔断降级，⼀次正常返回熔断降级</p><p><img src="`+m+'" alt="1697981321303"></p><p>正常返回</p><p><img src="'+v+'" alt="1697981343650"></p><hr><h2 id="_3-5-hystrix舱壁模式-线程池隔离策略" tabindex="-1"><a class="header-anchor" href="#_3-5-hystrix舱壁模式-线程池隔离策略" aria-hidden="true">#</a> <strong>3.5 Hystrix舱壁模式（线程池隔离策略）</strong></h2><p><img src="'+b+'" alt="1697981382803"></p><p>如果不进行任何设置，所有熔断⽅法使⽤⼀个Hystrix线程池（10个线程），那么这样的话会导致问题，这个问题并不是扇出链路微服务不可⽤导致的，而是我们的线程机制导致的，如果⽅法A的请求把10个线程都用了，⽅法2请求处理的时候压根都没法去访问B，因为没有线程可⽤，并不是B服务不可⽤。</p><p><img src="'+g+'" alt="1697981416291"></p><p><img src="'+y+'" alt="1697981436643"></p><p>为了避免问题服务请求过多导致正常服务⽆法访问，Hystrix 不是采用增加线程数，而是单独的为每⼀个控制⽅法创建⼀个线程池的⽅式，这种模式叫做“舱壁模式&quot;，也是线程隔离的⼿段。</p><p><strong>我们可以使用⼀些手段查看线程情况</strong></p><p><img src="'+h+`" alt="1697981465525"></p><p>Hystrix舱壁模式程序修改</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 提供者模拟处理超时，调⽤⽅法添加Hystrix控制
 * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token comment">// 使⽤@HystrixCommand注解进⾏熔断控制</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>
        <span class="token comment">// 线程池标识，要保持唯⼀，不唯⼀的话就共⽤了</span>
        threadPoolKey <span class="token operator">=</span> <span class="token string">&quot;findResumeOpenStateTimeout&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 线程池细节属性配置</span>
        threadPoolProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;coreSize&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 线程数</span>
           <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;maxQueueSize&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 等待队列⻓度</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// commandProperties熔断的⼀些细节属性配置</span>
        commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token comment">// 每⼀个属性都是⼀个HystrixProperty</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">&quot;2000&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/checkStateTimeout/{userId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">findResumeOpenStateTimeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 使⽤ribbon不需要我们⾃⼰获取服务实例然后选择⼀个那么去访问了（⾃⼰的负载均衡）</span>
    <span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">&quot;http://lagou-service-resume/resume/openstate/&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span> <span class="token comment">// 指定服务名</span>
    <span class="token class-name">Integer</span> forObject<span class="token operator">=</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> forObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/checkStateTimeoutFallback/{userId}&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>
        <span class="token comment">// 线程池标识，要保持唯⼀，不唯⼀的话就共⽤了</span>
        threadPoolKey <span class="token operator">=</span> <span class="token string">&quot;findResumeOpenStateTimeoutFallback&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 线程池细节属性配置</span>
        threadPoolProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;coreSize&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 线程数</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;maxQueueSize&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 等待队列⻓度</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// commandProperties熔断的⼀些细节属性配置</span>
        commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token comment">// 每⼀个属性都是⼀个HystrixProperty</span>
                <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">&quot;2000&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;myFallBack&quot;</span> <span class="token comment">// 回退⽅法</span>
                <span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">findResumeOpenStateTimeoutFallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 使⽤ribbon不需要我们⾃⼰获取服务实例然后选择⼀个那么去访问了（⾃⼰的负载均衡）</span>
        <span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">&quot;http://lagou-service-resume/resume/openstate/&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span> <span class="token comment">// 指定服务名</span>
        <span class="token class-name">Integer</span> forObject<span class="token operator">=</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> forObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过jstack命令查看线程情况，和我们程序设置相符合</p><p><img src="`+x+'" alt="1697981863352"></p><hr><h2 id="_3-6-hystrix工作流程与高级应用" tabindex="-1"><a class="header-anchor" href="#_3-6-hystrix工作流程与高级应用" aria-hidden="true">#</a> <strong>3.6 Hystrix工作流程与高级应用</strong></h2><p><img src="'+f+`" alt="1697981993010"></p><p>1）当调⽤出现问题时，开启⼀个时间窗（10s）</p><p>2）在这个时间窗内，统计调⽤次数是否达到最⼩请求数？</p><p>如果没有达到，则重置统计信息，回到第1步</p><p>如果达到了，则统计失败的请求数占所有请求数的百分⽐，是否达到阈值？</p><p>如果达到，则跳闸（不再请求对应服务）</p><p>如果没有达到，则重置统计信息，回到第1步</p><p>3）如果跳闸，则会开启⼀个活动窗⼝（默认5s），每隔5s，Hystrix会让⼀个请求通过,到达那个问题服务，看 是否调⽤成功，如果成功，重置断路器回到第1步，如果失败，回到第3步</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 8秒钟内，请求次数达到2个，并且失败率在50%以上，就跳闸
 * 跳闸后活动窗⼝设置为3s
 */</span>
 <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>
     commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;metrics.rollingStats.timeInMilliseconds&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;8000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;circuitBreaker.requestVolumeThreshold&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;circuitBreaker.errorThresholdPercentage&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;50&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;circuitBreaker.sleepWindowInMilliseconds&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;3000&quot;</span><span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们上述通过注解进⾏的配置也可以配置在配置⽂件中</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 配置熔断策略：</span>
<span class="token key atrule">hystrix</span><span class="token punctuation">:</span> 
 <span class="token key atrule">command</span><span class="token punctuation">:</span>
  <span class="token key atrule">default</span><span class="token punctuation">:</span>
   <span class="token key atrule">circuitBreaker</span><span class="token punctuation">:</span>
     <span class="token comment"># 强制打开熔断器，如果该属性设置为true，强制断路器进⼊打开状态，将会拒绝所有的请求。 默认false关闭的</span>
     <span class="token key atrule">forceOpen</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
     <span class="token comment"># 触发熔断错误⽐例阈值，默认值50%</span>
     <span class="token key atrule">errorThresholdPercentage</span><span class="token punctuation">:</span> <span class="token number">50</span>
     <span class="token comment"># 熔断后休眠时⻓，默认值5秒</span>
     <span class="token key atrule">sleepWindowInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">3000</span> 
     <span class="token comment"># 熔断触发最⼩请求次数，默认值是20</span>
     <span class="token key atrule">requestVolumeThreshold</span><span class="token punctuation">:</span> <span class="token number">2</span> 
   <span class="token key atrule">execution</span><span class="token punctuation">:</span>
    <span class="token key atrule">isolation</span><span class="token punctuation">:</span>
      <span class="token key atrule">thread</span><span class="token punctuation">:</span>
        <span class="token comment"># 熔断超时设置，默认为1秒</span>
        <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">2000</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于springboot的健康检查观察跳闸状态（⾃动投递微服务暴露健康检查细节）</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># springboot中暴露健康检查等断点接⼝</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
   <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
     <span class="token key atrule">web</span><span class="token punctuation">:</span>
       <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
         <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
 <span class="token comment"># 暴露健康接⼝的细节</span>
   <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>
     <span class="token key atrule">health</span><span class="token punctuation">:</span>
         <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58),K={href:"http://localhost:8090/actuator/health",target:"_blank",rel:"noopener noreferrer"},W=a('<p><img src="'+w+`" alt="1697982281316"></p><h2 id="_3-7-hystrix-dashboard断路监控仪表盘" tabindex="-1"><a class="header-anchor" href="#_3-7-hystrix-dashboard断路监控仪表盘" aria-hidden="true">#</a> <strong>3.7 Hystrix Dashboard断路监控仪表盘</strong></h2><p>正常状态是UP，跳闸是⼀种状态CIRCUIT_OPEN，可以通过/health查看，前提是工程中需要引⼊SpringBoot的actuator（健康监控），它提供了很多监控所需的接⼝，可以对应⽤系统进⾏配置查看、相关功能统计等。</p><p>已经统⼀添加在父工程中</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想看到Hystrix相关数据，⽐如有多少请求、多少成功、多少失败、多少降级等，那么引⼊SpringBoot健康监控之后，访问/actuator/hystrix.stream接⼝可以获取到监控的⽂字信息，但是不直观，所以Hystrix官方还提供了基于图形化的DashBoard（仪表板）监控平 台。Hystrix仪表板可以显示每个断路器（被@HystrixCommand注解的方法）的状态。</p><p><img src="`+q+'" alt="1697982399908"></p><p><img src="'+_+`" alt="1697982417635"></p><p>1）新建⼀个监控服务⼯程，导入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--hystrix--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--hystrix 仪表盘--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrixdashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eurekaclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）启动类添加@EnableHystrixDashboard激活仪表盘</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span></span><span class="token class-name">EnableHystrixDashboard</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableHystrixDashboard</span> <span class="token comment">// 开启hystrix dashboard</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixDashboardApplication9000</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HystrixDashboardApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>application.yml</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
 <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span>
<span class="token key atrule">Spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">application</span><span class="token punctuation">:</span>
 <span class="token key atrule">name</span><span class="token punctuation">:</span> lagou<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>hystrix<span class="token punctuation">-</span>dashboard
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">client</span><span class="token punctuation">:</span>
 <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span> <span class="token comment"># eureka server的路径</span>
 <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//lagoucloudeurekaservera<span class="token punctuation">:</span>8761/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//lagoucloudeurekaserverb<span class="token punctuation">:</span>8762/eureka/ <span class="token comment">#把 eureka 集群中的所有 url 都填写了进来，也可以只写⼀台，因为各个 eureka server 可以同步注册表</span>
 <span class="token key atrule">instance</span><span class="token punctuation">:</span>
 <span class="token comment">#使⽤ip注册，否则会使⽤主机名注册了（此处考虑到对⽼版本的兼容，新版本经过实验都是ip）</span>
 <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token comment">#⾃定义实例显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress</span>
 <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.client.ip<span class="token punctuation">-</span>address<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span><span class="token punctuation">:</span>@project.version@
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）在被监测的微服务中注册监控servlet（⾃动投递微服务，监控数据就是来⾃于这个微服务）</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>@Bean
 public ServletRegistrationBean getServlet()<span class="token punctuation">{</span>
     HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet();
     ServletRegistrationBean registrationBean = new ServletRegistrationBean(streamServlet);
     registrationBean.setLoadOnStartup(1);
     registrationBean.addUrlMappings(&quot;/actuator/hystrix.stream&quot;);
     registrationBean.setName(&quot;HystrixMetricsStreamServlet&quot;);
     return registrationBean;
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被监控微服务发布之后，可以直接访问监控servlet，但是得到的数据并不直观，后期可以结合仪表盘更友好的展示</p><p><img src="`+I+'" alt="1697982554176"></p><p>5）访问测试http://localhost:9000/hystrix</p><p><img src="'+S+'" alt="1697982572359"></p><p>输⼊监控的微服务端点地址，展示监控的详细数据，⽐如监控服务消费者http://localhost:8090/actuator/hystrix.stream</p><p><img src="'+H+'" alt="1697982599950"></p><p>百分比，10s内错误请求百分比</p><p>实心圆：</p><p>大小：代表请求流量的大小，流量越大球越大</p><p>颜色：代表请求处理的健康状态，从绿⾊到红⾊递减，绿⾊代表健康，红色就代表很不健康</p><p>曲线波动图：</p><p>记录了2分钟内该方法上流量的变化波动图，判断流量上升或者下降的趋势</p><hr><h2 id="_3-8-hystrix-turbine聚合监控" tabindex="-1"><a class="header-anchor" href="#_3-8-hystrix-turbine聚合监控" aria-hidden="true">#</a> <strong>3.8 Hystrix Turbine聚合监控</strong></h2><p>之前，我们针对的是⼀个微服务实例的Hystrix数据查询分析，在微服务架构下，⼀个微服务的实例往往是多个（集群化）</p><p>比如⾃动投递微服务</p><p>实例1(hystrix) ip1:port1/actuator/hystrix.stream</p><p>实例2(hystrix) ip2:port2/actuator/hystrix.stream</p><p>实例3(hystrix) ip3:port3/actuator/hystrix.stream</p><p>按照已有的⽅法，我们就可以结合dashboard仪表盘每次输⼊⼀个监控数据流url，进去查看</p><p>⼿⼯操作能否被⾃动功能替代？Hystrix Turbine聚合（聚合各个实例上的hystrix监控数据）监控Turbine（涡轮）</p><p>思考：微服务架构下，⼀个微服务往往部署多个实例，如果每次只能查看单个实例的监控，就需要经常切换很不方便，在这样的场景下，我们可以使⽤ Hystrix Turbine 进⾏聚合监控，它可以把相关微服务的监控数据聚合在⼀起，便于查看。</p><p><img src="'+P+`" alt="1697982757487"></p><p><strong>Turbine服务搭建</strong></p><p>1）新建项⽬lagou-cloud-hystrix-turbine-9001，引⼊依赖坐标</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
 <span class="token comment">&lt;!--hystrix turbine聚合监控--&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-turbine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token comment">&lt;!--
 引⼊eureka客户端的两个原因
 1、⽼师说过，微服务架构下的服务都尽量注册到服务中⼼去，便于统⼀管理
 2、后续在当前turbine项⽬中我们需要配置turbine聚合的服务，⽐如，我们希望聚合 lagou-service-autodeliver这个服务的各个实例的hystrix数据流，那随后 
    我们就需要在application.yml⽂件中配置这个服务名，那么turbine获取服务下具体实例的数据流的时候需要ip和端⼝等实例信息，那么怎么根据服务名称获取到这些信息呢？
 当然可以从eureka服务注册中⼼获取
 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）将需要进⾏Hystrix监控的多个微服务配置起来，在⼯程application.yml中开启 Turbine及进⾏相关配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
 <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9001</span>
<span class="token key atrule">Spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">application</span><span class="token punctuation">:</span>
 <span class="token key atrule">name</span><span class="token punctuation">:</span> lagou<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>hystrix<span class="token punctuation">-</span>turbine
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
 <span class="token key atrule">client</span><span class="token punctuation">:</span>
 <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span> <span class="token comment"># eureka server的路径</span>
 <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//lagoucloudeurekaservera<span class="token punctuation">:</span>8761/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//lagoucloudeurekaserverb<span class="token punctuation">:</span>8762/eureka/ <span class="token comment">#把 eureka 集群中的所有 url 都填写了进来，也可以只写⼀台，因为各个 eureka server 可以同步注册表</span>
 <span class="token key atrule">instance</span><span class="token punctuation">:</span>
 <span class="token comment">#使⽤ip注册，否则会使⽤主机名注册了（此处考虑到对⽼版本的兼容，新版本经过实验都是ip）</span>
 <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token comment">#⾃定义实例显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress</span>
 <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.client.ip<span class="token punctuation">-</span>address<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span><span class="token punctuation">:</span>@project.version@
<span class="token comment">#turbine配置</span>
<span class="token key atrule">turbine</span><span class="token punctuation">:</span>
 <span class="token comment"># appCofing配置需要聚合的服务名称，⽐如这⾥聚合⾃动投递微服务的hystrix监控数据 # 如果要聚合多个微服务的监控数据，那么可以使⽤英⽂逗号拼接，⽐如 a,b,c</span>
 <span class="token key atrule">appConfig</span><span class="token punctuation">:</span> lagou<span class="token punctuation">-</span>service<span class="token punctuation">-</span>autodeliver
 <span class="token key atrule">clusterNameExpression</span><span class="token punctuation">:</span> <span class="token string">&quot;&#39;default&#39;&quot;</span> <span class="token comment"># 集群默认名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）在当前项⽬启动类上添加注解@EnableTurbine，开启仪表盘以及Turbine聚合</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>package com.lagou.edu;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;
import org.springframework.cloud.netflix.turbine.EnableTurbine;

@SpringBootApplication
@EnableDiscoveryClient
@EnableTurbine // 开启聚合功能
public class HystrixTurbineApplication9001 <span class="token punctuation">{</span>
 public static void main(String<span class="token punctuation">[</span><span class="token punctuation">]</span> args) <span class="token punctuation">{</span>
 SpringApplication.run(HystrixTurbineApplication9001.class<span class="token punctuation">,</span>args);
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),Z={href:"http://localhost:9001/turbine.stream",target:"_blank",rel:"noopener noreferrer"},X=a('<hr><h2 id="_3-9-hystrix核心源码剖析" tabindex="-1"><a class="header-anchor" href="#_3-9-hystrix核心源码剖析" aria-hidden="true">#</a> <strong>3.9 Hystrix核心源码剖析</strong></h2><p>springboot装配、⾯向切⾯编程、RxJava响应式编程的知识等等，我们剖析下主体脉络。</p><p>分析⼊⼝：@EnableCircuitBreaker注解激活了熔断功能，那么该注解就是 Hystrix 源码追踪的⼊⼝.</p><ul><li>@EnableCircuitBreaker注解激活熔断器</li></ul><p><img src="'+T+'" alt="1697982915047"></p><ul><li>查看EnableCircuitBreakerImportSelector类</li></ul><p><img src="'+C+'" alt="1697982954991"></p><ul><li>继续<strong>关注⽗类</strong> SpringFactoryImportSelector</li></ul><p><img src="'+B+'" alt="1697982985590"></p><p>spring.factories⽂件内容如下</p><p><img src="'+j+'" alt="1697983008138"></p><p>会注⼊ org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration</p><p><img src="'+z+'" alt="1697983028211"></p><p><strong>关注切面：</strong> <strong>com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect</strong></p><p><img src="'+R+'" alt="1697983051179"></p><p>重点分析环绕通知方法</p><p><img src="'+O+'" alt="1697983070007"></p><p>GenericCommand中根据元数据信息重写了两个很核⼼的⽅法，⼀个是run⽅法封装了对原始⽬标⽅法的调用，另外⼀个是getFallBack方法它封装了对回退⽅法的调用。另外，在GenericCommand的上层类构造函数中会完成资源的初始化，</p><p>比如线程池 GenericCommand —&gt;AbstractHystrixCommand—&gt;HystrixCommand —&gt; AbstractCommand</p><p><img src="'+A+'" alt="1697983166144"></p><p><img src="'+M+'" alt="1697986268123"></p><p><img src="'+E+'" alt="1697986279399"></p><p>接下来回到环绕通知方法那张截图</p><p><img src="'+V+'" alt="1697986307433"></p><p><img src="'+F+'" alt="1697986318299"></p><p><img src="'+D+'" alt="1697986334701"></p><p><img src="'+L+'" alt="1697986344564"></p><p>另外，我们观察，GenericCommand⽅法中根据元数据信息等重写了run⽅法（对目标方法的调⽤），getFallback⽅法（对回退⽅法的调⽤），在RxJava处理过程中会完成对这两个⽅法的调用。</p><p><img src="'+G+'" alt="1697986380377"></p><p><img src="'+N+'" alt="1697986404520"></p>',31);function Y(nn,sn){const t=o("ExternalLinkIcon");return c(),i("div",null,[Q,U,J,n("p",null,[s("访问健康检查接⼝："),n("a",K,[s("http://localhost:8090/actuator/health"),e(t)])]),W,n("p",null,[s("4）浏览器访问Turbine项⽬，"),n("a",Z,[s("http://localhost:9001/turbine.stream"),e(t)]),s("，就可以看到监控数据了")]),X])}const tn=p($,[["render",Y],["__file","43.html.vue"]]);export{tn as default};
