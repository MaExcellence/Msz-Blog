import{_ as e,r as p,o,c,a as s,d as n,e as i,b as a}from"./app-1f8a5ff3.js";const l="/msz-blog/assets/1696158911252-1a63ee22.png",u="/msz-blog/assets/1696158960408-1758db20.png",r="/msz-blog/assets/1696159110631-a4d001b5.png",k="/msz-blog/assets/1696159152866-bd4f0565.png",d="/msz-blog/assets/1696159188239-a2911753.png",m="/msz-blog/assets/1696159245971-942eec9e.png",v="/msz-blog/assets/1696159319781-d3274263.png",b="/msz-blog/assets/1696159476407-d9a2c16f.png",g="/msz-blog/assets/1696159564441-cbd07735.png",f="/msz-blog/assets/1696159614992-0b3bc864.png",y="/msz-blog/assets/1696159649610-944c5f42.png",B="/msz-blog/assets/1696159699824-33ff46e7.png",h="/msz-blog/assets/1696159737700-390a1b26.png",w="/msz-blog/assets/1696159768331-6a67c530.png",C="/msz-blog/assets/1696159803766-084ca146.png",P="/msz-blog/assets/1696159846689-cbabb132.png",_="/msz-blog/assets/1696159874999-6d708a4d.png",x="/msz-blog/assets/1696159961568-a1963b8a.png",F="/msz-blog/assets/1696160011994-30c29989.png",S="/msz-blog/assets/1696160061387-2268ec1b.png",A="/msz-blog/assets/1696160089542-498af01c.png",q="/msz-blog/assets/1696160132831-b5754357.png",z="/msz-blog/assets/1696160176427-0afef25a.png",I="/msz-blog/assets/1696160202705-1a905081.png",j="/msz-blog/assets/1696160235529-8caa2b4f.png",D="/msz-blog/assets/1696160261801-eb5f7bd2.png",N="/msz-blog/assets/1696160594464-1a389eb7.png",E={},L=a('<h1 id="第1节-spring-ioc容器初始化主体流程" tabindex="-1"><a class="header-anchor" href="#第1节-spring-ioc容器初始化主体流程" aria-hidden="true">#</a> <strong>第1节 Spring IoC容器初始化主体流程</strong></h1><h2 id="_1-1-spring-ioc的容器体系" tabindex="-1"><a class="header-anchor" href="#_1-1-spring-ioc的容器体系" aria-hidden="true">#</a> 1.1 Spring IoC的容器体系</h2><p>IoC容器是Spring的核心模块，是抽象了对象管理、依赖关系管理的框架解决⽅案。Spring 提供了很多的容器，其中 BeanFactory 是顶层容器（根容器），不能被实例化，它定义了所有 IoC 容器 必须遵从的⼀套原则，具体的容器实现可以增加额外的功能，⽐如我们常用到的ApplicationContext，其下更具体的实现如 ClassPathXmlApplicationContext 包含了解析 xml 等⼀系列的内容， AnnotationConfifigApplicationContext 则是包含了注解解析等⼀系列的内容。Spring IoC 容器继承体系 ⾮常聪明，需要使用哪个层次用哪个层次即可，不必使用功能大而全的。</p><p><strong>BeanFactory 顶级接口方法栈如下：</strong></p><p><img src="'+l+'" alt="1696158911252"></p><p>注意：<strong>String FACTORY_BEAN_PREFIX = &quot;&amp;&quot;;</strong></p>',6),R={href:"https://so.csdn.net/so/search?q=FactoryBean&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},O=a('<p><strong>BeanFactory 容器继承体系：</strong></p><p><img src="'+u+`" alt="1696158960408"></p><p>通过其接⼝设计，我们可以看到我们⼀贯使⽤的 ApplicationContext 除了继承BeanFactory的⼦接⼝， 还继承了ResourceLoader、MessageSource等接⼝，因此其提供的功能也就更丰富了。</p><p>下⾯我们以 ClasspathXmlApplicationContext 为例，深⼊源码说明 IoC 容器的初始化流程。</p><h2 id="_1-2-bean生命周期关键时机点" tabindex="-1"><a class="header-anchor" href="#_1-2-bean生命周期关键时机点" aria-hidden="true">#</a> 1.2 Bean生命周期关键时机点</h2><p>**思路：**创建⼀个类 LagouBean ，让其实现⼏个特殊的接⼝，并分别在接⼝实现的构造器、接口⽅法中</p><p>断点，观察线程调⽤栈，分析出 Bean 对象创建和管理关键点的触发时机。</p><ul><li>LagouBean类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeansException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">DisposableBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">BeanFactoryPostProcessor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">BeanPostProcessor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableListableBeanFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LagouBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">{</span>

<span class="token doc-comment comment">/**
* 构造函数
*/</span>
 <span class="token keyword">public</span> <span class="token class-name">LagouBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;LagouBean 构造器...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* InitializingBean 接⼝实现
*/</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;LagouBean afterPropertiesSet...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>BeanPostProcessor 接⼝实现类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeansException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">BeanPostProcessor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>

 <span class="token keyword">public</span> <span class="token class-name">MyBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;BeanPostProcessor 实现类构造函数...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token annotation punctuation">@Override</span>
 <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;lagouBean&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;BeanPostProcessor 实现类postProcessBeforeInitialization ⽅法被调⽤中......&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
     <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

 <span class="token annotation punctuation">@Override</span>
 <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;lagouBean&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;BeanPostProcessor 实现类postProcessAfterInitialization ⽅法被调⽤中......&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>BeanFactoryPostProcessor 接⼝实现类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeansException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">BeanFactoryPostProcessor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span>
<span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableListableBeanFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>
   
     <span class="token keyword">public</span> <span class="token class-name">MyBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;BeanFactoryPostProcessor的实现类构造函数...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span>  beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;BeanFactoryPostProcessor的实现⽅法调⽤中......&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>applicationContext.xml</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">?</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">&quot;http://www.springframework.org/schema/beans&quot;</span>
       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>&quot;http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans
       https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd&quot;<span class="token operator">&gt;</span>

      <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;lagouBean&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;com.lagou.LagouBean&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;myBeanFactoryPostProcessor&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;com.lagou.MyBeanFactoryPostProcessor&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;myBeanPostProcessor&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;com.lagou.MyBeanPostProcessor&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>IoC 容器源码分析⽤例</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Ioc 容器源码分析基础案例
*/</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIoC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LagouBean</span> lagouBean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">LagouBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lagouBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（1）分析 Bean 的创建是在容器初始化时还是在 getBean 时：</strong></p><p><img src="`+r+'" alt="1696159110631"></p><p>根据断点调试，我们发现，在未设置延迟加载的前提下，Bean 的创建是在容器初始化过程中完成的。</p><p><strong>（2）分析构造函数调用情况</strong></p><p><img src="'+k+'" alt="1696159152866"></p><p><img src="'+d+'" alt="1696159188239"></p><p>通过如上观察，我们发现构造函数的调⽤时机在AbstractApplicationContext类 <strong>refresh⽅法</strong> 的 fifinishBeanFactoryInitialization(beanFactory)处;</p><p><strong>（3）分析 InitializingBean 之 afterPropertiesSet 初始化方法调用情况</strong></p><p><img src="'+m+'" alt="1696159245971"></p><p>通过如上观察，我们发现 InitializingBean中afterPropertiesSet ⽅法的调⽤时机也是在 AbstractApplicationContext类refresh⽅法的fifinishBeanFactoryInitialization(beanFactory);</p><p><strong>（4）分析BeanFactoryPostProcessor 初始化和调⽤情况</strong></p><p>​ 分别在构造函数、postProcessBeanFactory ⽅法处打断点，观察调⽤栈，发现</p><p>​ <strong>BeanFactoryPostProcessor 初始化</strong>在AbstractApplicationContext类refresh⽅法的 invokeBeanFactoryPostProcessors(beanFactory);</p><p>​ <strong>postProcessBeanFactory 调⽤</strong>在AbstractApplicationContext类refresh⽅法的 invokeBeanFactoryPostProcessors(beanFactory);</p><p><strong>（5）分析 BeanPostProcessor 初始化和调⽤情况</strong></p><p>​ 分别在构造函数、postProcessBeanFactory ⽅法处打断点，观察调⽤栈，发现</p><p>​ <strong>BeanPostProcessor 初始化</strong>在AbstractApplicationContext类refresh⽅法的 registerBeanPostProcessors(beanFactory);</p><p>​ <strong>postProcessBeforeInitialization 调⽤</strong>在AbstractApplicationContext类refresh⽅法的 fifinishBeanFactoryInitialization(beanFactory);</p><p>​ <strong>postProcessAfterInitialization 调⽤</strong>在AbstractApplicationContext类refresh⽅法的 fifinishBeanFactoryInitialization(beanFactory);</p><p><strong>（6）总结</strong></p><p>​ 根据上⾯的调试分析，我们发现 Bean对象创建的⼏个关键时机点代码层级的调⽤都在 AbstractApplicationContext 类 的 refresh ⽅法中，可⻅这个⽅法对于Spring IoC 容器初始化来说相当 关键，汇总如下：</p><p><img src="'+v+`" alt="1696159319781"></p><h2 id="_1-3-spring-ioc容器初始化主流程" tabindex="-1"><a class="header-anchor" href="#_1-3-spring-ioc容器初始化主流程" aria-hidden="true">#</a> 1.3 Spring IoC容器初始化主流程</h2><p>​ 由上分析可知，Spring IoC 容器初始化的关键环节就在 AbstractApplicationContext#refresh() ⽅法中 ，我们查看 refresh ⽅法来俯瞰容器创建的主体流程，主体流程下的具体⼦流程我们后⾯再来讨论。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第⼀步：刷新前的预处理</span>
    <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
    第⼆步：
    获取BeanFactory；默认实现是DefaultListableBeanFactory
    加载BeanDefition 并注册到 BeanDefitionRegistry
    / 
    ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

    // 第三步：BeanFactory的预准备⼯作（BeanFactory进⾏⼀些设置，⽐如context的类加载器等）
    prepareBeanFactory(beanFactory);

    try {
        // 第四步：BeanFactory准备⼯作完成后进⾏的后置处理⼯作
        postProcessBeanFactory(beanFactory);

        // 第五步：实例化并调⽤实现了BeanFactoryPostProcessor接⼝的Bean 
        invokeBeanFactoryPostProcessors(beanFactory);

        // 第六步：注册BeanPostProcessor（Bean的后置处理器），在创建bean的前后等执⾏
        registerBeanPostProcessors(beanFactory);

        // 第七步：初始化MessageSource组件（做国际化功能；消息绑定，消息解析）；
        initMessageSource();

        // 第⼋步：初始化事件派发器
        initApplicationEventMulticaster();

        // 第九步：⼦类重写这个⽅法，在容器刷新的时候可以⾃定义逻辑
        onRefresh();

        // 第⼗步：注册应⽤的监听器。就是注册实现了ApplicationListener接⼝的监听器bean
        registerListeners();

        /
        第⼗⼀步：
        初始化所有剩下的⾮懒加载的单例bean
        初始化创建⾮懒加载⽅式的单例Bean实例（未设置属性）
        填充属性
        初始化⽅法调⽤（⽐如调⽤afterPropertiesSet⽅法、init-method⽅法）
        调⽤BeanPostProcessor（后置处理器）对实例bean进⾏后置处
        /
        finishBeanFactoryInitialization(beanFactory);

        /
        第⼗⼆步：
        完成context的刷新。主要是调⽤LifecycleProcessor的onRefresh()⽅法，并且发布事
        件 （ContextRefreshedEvent）
        */</span>
        <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="第2节-beanfactory创建流程" tabindex="-1"><a class="header-anchor" href="#第2节-beanfactory创建流程" aria-hidden="true">#</a> <strong>第2节 BeanFactory创建流程</strong></h1><h2 id="_2-1-获取beanfactory子流程" tabindex="-1"><a class="header-anchor" href="#_2-1-获取beanfactory子流程" aria-hidden="true">#</a> <strong>2.1 获取BeanFactory子流程</strong></h2><p><img src="`+b+'" alt="1696159476407"></p><h2 id="_2-2-beandefifinition加载解析及注册子流程" tabindex="-1"><a class="header-anchor" href="#_2-2-beandefifinition加载解析及注册子流程" aria-hidden="true">#</a> <strong>2.2 BeanDefifinition加载解析及注册⼦流程</strong></h2><p><strong>（1）该子流程涉及到如下几个关键步骤</strong></p><ul><li>Resource定位：指对BeanDefifinition的资源定位过程。通俗讲就是找到定义Javabean信息的XML⽂件，并将其封装成Resource对象。</li><li>BeanDefifinition载⼊ ：把⽤户定义好的Javabean表示为IoC容器内部的数据结构，这个容器内部的数据结构就是BeanDefifinition。</li><li>注册BeanDefifinition到 IoC 容器</li></ul><p><strong>（2）过程分析</strong></p><p>**Step 1：**子流程入口在 AbstractRefreshableApplicationContext#refreshBeanFactory ⽅法中</p><p><img src="'+g+'" alt="1696159564441"></p><p>**Step 2：**依次调⽤多个类的 loadBeanDefifinitions ⽅法 —&gt; AbstractXmlApplicationContext —&gt; AbstractBeanDefifinitionReader —&gt; XmlBeanDefifinitionReader</p><p>⼀直执⾏到 XmlBeanDefifinitionReader 的 doLoadBeanDefifinitions 方法</p><p><img src="'+f+'" alt="1696159614992"></p><p>**Step 3：**我们重点观察XmlBeanDefifinitionReader 类的 registerBeanDefifinitions ⽅法，期间产⽣了多次重载调⽤，我们定位到最后⼀个</p><p><img src="'+y+'" alt="1696159649610"></p><ul><li>此处我们关注两个地⽅：⼀个createRederContext⽅法，⼀个是 DefaultBeanDefifinitionDocumentReader类的registerBeanDefifinitions⽅法，先进⼊ createRederContext ⽅法看看</li></ul><p><img src="'+B+'" alt="1696159699824"></p><ul><li>我们可以看到，此处 Spring ⾸先完成了 NamespaceHandlerResolver 的初始化。 我们再进⼊ registerBeanDefifinitions ⽅法中追踪，调⽤了</li></ul><p>DefaultBeanDefifinitionDocumentReader#registerBeanDefifinitions 方法</p><p><img src="'+h+'" alt="1696159737700"></p><ul><li>进⼊ doRegisterBeanDefifinitions ⽅法</li></ul><p><img src="'+w+'" alt="1696159768331"></p><ul><li><p>进⼊ parseBeanDefifinitions ⽅法</p><p><img src="'+C+'" alt="1696159803766"></p></li><li><p>进⼊ parseDefaultElement ⽅法</p></li></ul><p><img src="'+P+'" alt="1696159846689"></p><ul><li>进⼊ processBeanDefifinition ⽅法</li></ul><p><img src="'+_+'" alt="1696159874999"></p><ul><li>⾄此，注册流程结束，我们发现，所谓的注册就是把封装的 XML 中定义的 Bean信息封装为 BeanDefifinition 对象之后放⼊⼀个Map中，BeanFactory 是以 Map 的结构组织这些 BeanDefifinition的。</li></ul><p><img src="'+x+'" alt="1696159961568"></p><p><img src="'+F+'" alt="1696160011994"></p><h1 id="第3节-bean创建流程" tabindex="-1"><a class="header-anchor" href="#第3节-bean创建流程" aria-hidden="true">#</a> <strong>第3节 Bean创建流程</strong></h1><ul><li>通过最开始的关键时机点分析，我们知道Bean创建⼦流程⼊⼝在 AbstractApplicationContext#refresh()⽅法的fifinishBeanFactoryInitialization(beanFactory) 处</li></ul><p><img src="'+S+'" alt="1696160061387"></p><ul><li>进⼊fifinishBeanFactoryInitialization</li></ul><p><img src="'+A+'" alt="1696160089542"></p><ul><li>继续进⼊DefaultListableBeanFactory类的preInstantiateSingletons⽅法，我们找到下⾯部分的代码，看到⼯⼚Bean或者普通Bean，最终都是通过getBean的⽅法获取实例</li></ul><p><img src="'+q+'" alt="1696160132831"></p><ul><li>继续跟踪下去，我们进⼊到了AbstractBeanFactory类的doGetBean⽅法，这个⽅法中的代码很多，我们直接找到核心部分</li></ul><p><img src="'+z+'" alt="1696160176427"></p><ul><li>接着进⼊到AbstractAutowireCapableBeanFactory类的⽅法，找到以下代码部分</li></ul><p><img src="'+I+'" alt="1696160202705"></p><ul><li>进⼊doCreateBean⽅法看看，该⽅法我们关注两块重点区域</li></ul><p>​ 1.创建Bean实例，此时尚未设置属性</p><p><img src="'+j+'" alt="1696160235529"></p><p>​ 2.给Bean填充属性，调⽤初始化⽅法，应⽤BeanPostProcessor后置处理器</p><p><img src="'+D+`" alt="1696160261801"></p><hr><h1 id="第4节-lazy-init-延迟加载机制原理" tabindex="-1"><a class="header-anchor" href="#第4节-lazy-init-延迟加载机制原理" aria-hidden="true">#</a> <strong>第4节 lazy-init 延迟加载机制原理</strong></h1><ul><li>lazy-init 延迟加载机制分析</li></ul><p>普通 Bean 的初始化是在容器启动初始化阶段执⾏的，⽽被lazy-init=true修饰的 bean 则是在从容器⾥第⼀次进⾏context.getBean() 时进⾏触发。Spring 启动的时候会把所有bean信息(包括XML和注解)解 析转化成Spring能够识别的BeanDefifinition并存到Hashmap⾥供下⾯的初始化时⽤，然后对每个 BeanDefifinition 进⾏处理，如果是懒加载的则在容器初始化阶段不处理，其他的则在容器初始化阶段进⾏初始化并依赖注⼊</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
      <span class="token comment">// 所有beanDefinition集合</span>
      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 触发所有⾮懒加载单例bean的初始化</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// 获取bean 定义</span>
          <span class="token class-name">RootBeanDefinition</span> bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">// 判断是否是懒加载单例bean，如果是单例的并且不是懒加载的则在容器创建时初始化</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// 判断是否是 FactoryBean</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">final</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
                  <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">FACTORY_BEAN_PREFIX</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">boolean</span> isEagerInit<span class="token punctuation">;</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> factory <span class="token keyword">instanceof</span>  <span class="token class-name">SmartFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      isEagerInit <span class="token operator">=</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          <span class="token annotation punctuation">@Override</span>
                          <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SmartFactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token comment">/*
                            如果是普通bean则进⾏初始化并依赖注⼊，此 getBean(beanName)接下来触发的逻辑和懒加载时 context.getBean(&quot;beanName&quot;) 所触发的逻辑是⼀样的
                            */</span>
                            <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token punctuation">}</span>
               <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>总结</li></ul><p>对于被修饰为lazy-init的bean Spring 容器初始化阶段不会进⾏ init 并且依赖注⼊，当第⼀次进⾏getBean时候才进⾏初始化并依赖注⼊对于⾮懒加载的bean，getBean的时候会从缓存⾥头获取，因为容器初始化阶段 Bean 已经初始化完成并缓存了起来。</p><hr><h1 id="第5节-spring-ioc循环依赖问题" tabindex="-1"><a class="header-anchor" href="#第5节-spring-ioc循环依赖问题" aria-hidden="true">#</a> <strong>第5节 Spring IoC循环依赖问题</strong></h1><h2 id="_5-1-什么是循环依赖" tabindex="-1"><a class="header-anchor" href="#_5-1-什么是循环依赖" aria-hidden="true">#</a> 5.1 什么是循环依赖</h2><p>循环依赖其实就是循环引⽤，也就是两个或者两个以上的 Bean 互相持有对⽅，最终形成闭环。⽐如A依赖于B，B依赖于C，C⼜依赖于A。</p><p><img src="`+N+`" alt="1696160594464"></p><p>注意，这⾥不是函数的循环调⽤，是对象的相互依赖关系。循环调⽤其实就是⼀个死循环，除⾮有终结条件。</p><p>Spring中循环依赖场景有：</p><ul><li>构造器的循环依赖（构造器注⼊）</li><li>Field 属性的循环依赖（set注⼊）</li></ul><p>其中，构造器的循环依赖问题⽆法解决，只能拋出 BeanCurrentlyInCreationException 异常，在解决属性循环依赖时，spring采⽤的是提前暴露对象的⽅法。</p><h2 id="_5-2-循环依赖处理机制" tabindex="-1"><a class="header-anchor" href="#_5-2-循环依赖处理机制" aria-hidden="true">#</a> 5.2 循环依赖处理机制</h2><p>​ 1.单例 bean 构造器参数循环依赖（⽆法解决）</p><p>​ 2.prototype 原型 bean循环依赖（⽆法解决）</p><p>​ 对于原型bean的初始化过程中不论是通过构造器参数循环依赖还是通过setXxx⽅法产⽣循环依赖，Spring都会直接报错处理。</p><p>​ AbstractBeanFactory.doGetBean()⽅法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> curVal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prototypesCurrentlyInCreation<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>curVal <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>curVal<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>curVal <span class="token keyword">instanceof</span> <span class="token class-name">Set</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>curVal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//在获取bean之前如果这个原型bean正在被创建则直接抛出异常。原型bean在创建之前会进⾏标记这个beanName正在被创建，等创建结束之后会删除标记    </span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建原型bean之前添加标记</span>
    <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建原型bean</span>
    prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建原型bean之后删除标记</span>
    <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：Spring 不⽀持原型 bean 的循环依赖。</p><ul><li>单例bean通过setXxx或者@Autowired进⾏循环依赖</li></ul><p>​ Spring 的循环依赖的理论依据基于 Java 的引⽤传递，当获得对象的引⽤时，对象的属性是可以延后设置的，但是构造器必须是在获取引⽤之前 Spring通过setXxx或者@Autowired⽅法解决循环依赖其实是通过提前暴露⼀个ObjectFactory对象来完成的，简单来说ClassA在调⽤构造器完成对象初始化之后，在调⽤ClassA的setClassB⽅法</p><p>之前就把ClassA实例化的对象通过ObjectFactory提前暴露到Spring容器中。</p><ul><li>Spring容器初始化ClassA通过构造器初始化对象后提前暴露到Spring容器。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span> <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Eagerly caching bean &#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span><span class="token string">&quot;&#39; to allow for resolving potential circular references&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//将初始化后的对象提前已ObjectFactory对象注⼊到容器中</span>
      <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ClassA调⽤setClassB⽅法，Spring⾸先尝试从容器中获取ClassB，此时ClassB不存在Spring 容器中。</li><li>Spring容器初始化ClassB，同时也会将ClassB提前暴露到Spring容器中</li><li>ClassB调⽤setClassA⽅法，Spring从容器中获取ClassA ，因为第⼀步中已经提前暴露了ClassA，因此可以获取到ClassA实例</li><li>ClassA通过spring容器获取到ClassB，完成了对象初始化操作。</li><li>这样ClassA和ClassB都完成了对象初始化操作，解决了循环依赖问题。</li></ul>`,115);function M(X,V){const t=p("ExternalLinkIcon");return o(),c("div",null,[L,s("p",null,[n("如果我们在获取Bean的时候，使用&则获取的是"),s("a",R,[n("FactoryBean"),i(t)]),n("本身对象，否则是获取getObject的代理对象。")]),O])}const J=e(E,[["render",M],["__file","3.SpringIoc.html.vue"]]);export{J as default};
